package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIMIT_MODEL".
*/
public class LimitModelDao extends AbstractDao<LimitModel, Long> {

    public static final String TABLENAME = "LIMIT_MODEL";

    /**
     * Properties of entity LimitModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LIMIT_ID = new Property(1, String.class, "LIMIT_ID", false, "LIMIT__ID");
        public final static Property MAXIMUM_SALE_AMOUNT = new Property(2, String.class, "MAXIMUM_SALE_AMOUNT", false, "MAXIMUM__SALE__AMOUNT");
        public final static Property MAXIMUM_OFFLINE_AMOUNT = new Property(3, String.class, "MAXIMUM_OFFLINE_AMOUNT", false, "MAXIMUM__OFFLINE__AMOUNT");
        public final static Property MAXIMUM_PREAUTH_AMOUNT = new Property(4, String.class, "MAXIMUM_PREAUTH_AMOUNT", false, "MAXIMUM__PREAUTH__AMOUNT");
        public final static Property MAXIMUM_REFUND_AMOUNT = new Property(5, String.class, "MAXIMUM_REFUND_AMOUNT", false, "MAXIMUM__REFUND__AMOUNT");
    }


    public LimitModelDao(DaoConfig config) {
        super(config);
    }
    
    public LimitModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIMIT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LIMIT__ID\" TEXT," + // 1: LIMIT_ID
                "\"MAXIMUM__SALE__AMOUNT\" TEXT," + // 2: MAXIMUM_SALE_AMOUNT
                "\"MAXIMUM__OFFLINE__AMOUNT\" TEXT," + // 3: MAXIMUM_OFFLINE_AMOUNT
                "\"MAXIMUM__PREAUTH__AMOUNT\" TEXT," + // 4: MAXIMUM_PREAUTH_AMOUNT
                "\"MAXIMUM__REFUND__AMOUNT\" TEXT);"); // 5: MAXIMUM_REFUND_AMOUNT
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIMIT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LimitModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String LIMIT_ID = entity.getLIMIT_ID();
        if (LIMIT_ID != null) {
            stmt.bindString(2, LIMIT_ID);
        }
 
        String MAXIMUM_SALE_AMOUNT = entity.getMAXIMUM_SALE_AMOUNT();
        if (MAXIMUM_SALE_AMOUNT != null) {
            stmt.bindString(3, MAXIMUM_SALE_AMOUNT);
        }
 
        String MAXIMUM_OFFLINE_AMOUNT = entity.getMAXIMUM_OFFLINE_AMOUNT();
        if (MAXIMUM_OFFLINE_AMOUNT != null) {
            stmt.bindString(4, MAXIMUM_OFFLINE_AMOUNT);
        }
 
        String MAXIMUM_PREAUTH_AMOUNT = entity.getMAXIMUM_PREAUTH_AMOUNT();
        if (MAXIMUM_PREAUTH_AMOUNT != null) {
            stmt.bindString(5, MAXIMUM_PREAUTH_AMOUNT);
        }
 
        String MAXIMUM_REFUND_AMOUNT = entity.getMAXIMUM_REFUND_AMOUNT();
        if (MAXIMUM_REFUND_AMOUNT != null) {
            stmt.bindString(6, MAXIMUM_REFUND_AMOUNT);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LimitModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String LIMIT_ID = entity.getLIMIT_ID();
        if (LIMIT_ID != null) {
            stmt.bindString(2, LIMIT_ID);
        }
 
        String MAXIMUM_SALE_AMOUNT = entity.getMAXIMUM_SALE_AMOUNT();
        if (MAXIMUM_SALE_AMOUNT != null) {
            stmt.bindString(3, MAXIMUM_SALE_AMOUNT);
        }
 
        String MAXIMUM_OFFLINE_AMOUNT = entity.getMAXIMUM_OFFLINE_AMOUNT();
        if (MAXIMUM_OFFLINE_AMOUNT != null) {
            stmt.bindString(4, MAXIMUM_OFFLINE_AMOUNT);
        }
 
        String MAXIMUM_PREAUTH_AMOUNT = entity.getMAXIMUM_PREAUTH_AMOUNT();
        if (MAXIMUM_PREAUTH_AMOUNT != null) {
            stmt.bindString(5, MAXIMUM_PREAUTH_AMOUNT);
        }
 
        String MAXIMUM_REFUND_AMOUNT = entity.getMAXIMUM_REFUND_AMOUNT();
        if (MAXIMUM_REFUND_AMOUNT != null) {
            stmt.bindString(6, MAXIMUM_REFUND_AMOUNT);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LimitModel readEntity(Cursor cursor, int offset) {
        LimitModel entity = new LimitModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LIMIT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MAXIMUM_SALE_AMOUNT
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MAXIMUM_OFFLINE_AMOUNT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MAXIMUM_PREAUTH_AMOUNT
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // MAXIMUM_REFUND_AMOUNT
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LimitModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLIMIT_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMAXIMUM_SALE_AMOUNT(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMAXIMUM_OFFLINE_AMOUNT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMAXIMUM_PREAUTH_AMOUNT(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMAXIMUM_REFUND_AMOUNT(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LimitModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LimitModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LimitModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
