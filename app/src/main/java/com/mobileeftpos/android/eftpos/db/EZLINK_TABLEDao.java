package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EZLINK__TABLE".
*/
public class EZLINK_TABLEDao extends AbstractDao<EZLINK_TABLE, Long> {

    public static final String TABLENAME = "EZLINK__TABLE";

    /**
     * Properties of entity EZLINK_TABLE.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ezlink_ID = new Property(1, String.class, "Ezlink_ID", false, "EZLINK__ID");
        public final static Property EZLINK_ENABLE = new Property(2, String.class, "EZLINK_ENABLE", false, "EZLINK__ENABLE");
        public final static Property EZLINK_SAM_KEY = new Property(3, String.class, "EZLINK_SAM_KEY", false, "EZLINK__SAM__KEY");
        public final static Property EZLINK_PAYMENT_TRP = new Property(4, String.class, "EZLINK_PAYMENT_TRP", false, "EZLINK__PAYMENT__TRP");
        public final static Property EZLINK_TOPUP_TRP = new Property(5, String.class, "EZLINK_TOPUP_TRP", false, "EZLINK__TOPUP__TRP");
        public final static Property EZLINK_PAYMENT_DEVICE_TYPE = new Property(6, String.class, "EZLINK_PAYMENT_DEVICE_TYPE", false, "EZLINK__PAYMENT__DEVICE__TYPE");
        public final static Property EZLINK_TOPUP_DEVICE_TYPE = new Property(7, String.class, "EZLINK_TOPUP_DEVICE_TYPE", false, "EZLINK__TOPUP__DEVICE__TYPE");
        public final static Property EZLINK_BLACK_LIST_LAST_UPDATE = new Property(8, String.class, "EZLINK_BLACK_LIST_LAST_UPDATE", false, "EZLINK__BLACK__LIST__LAST__UPDATE");
        public final static Property EZLINK_TOPUP_PAYMENT_MODE = new Property(9, String.class, "EZLINK_TOPUP_PAYMENT_MODE", false, "EZLINK__TOPUP__PAYMENT__MODE");
    }


    public EZLINK_TABLEDao(DaoConfig config) {
        super(config);
    }
    
    public EZLINK_TABLEDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EZLINK__TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EZLINK__ID\" TEXT," + // 1: Ezlink_ID
                "\"EZLINK__ENABLE\" TEXT," + // 2: EZLINK_ENABLE
                "\"EZLINK__SAM__KEY\" TEXT," + // 3: EZLINK_SAM_KEY
                "\"EZLINK__PAYMENT__TRP\" TEXT," + // 4: EZLINK_PAYMENT_TRP
                "\"EZLINK__TOPUP__TRP\" TEXT," + // 5: EZLINK_TOPUP_TRP
                "\"EZLINK__PAYMENT__DEVICE__TYPE\" TEXT," + // 6: EZLINK_PAYMENT_DEVICE_TYPE
                "\"EZLINK__TOPUP__DEVICE__TYPE\" TEXT," + // 7: EZLINK_TOPUP_DEVICE_TYPE
                "\"EZLINK__BLACK__LIST__LAST__UPDATE\" TEXT," + // 8: EZLINK_BLACK_LIST_LAST_UPDATE
                "\"EZLINK__TOPUP__PAYMENT__MODE\" TEXT);"); // 9: EZLINK_TOPUP_PAYMENT_MODE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EZLINK__TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EZLINK_TABLE entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Ezlink_ID = entity.getEzlink_ID();
        if (Ezlink_ID != null) {
            stmt.bindString(2, Ezlink_ID);
        }
 
        String EZLINK_ENABLE = entity.getEZLINK_ENABLE();
        if (EZLINK_ENABLE != null) {
            stmt.bindString(3, EZLINK_ENABLE);
        }
 
        String EZLINK_SAM_KEY = entity.getEZLINK_SAM_KEY();
        if (EZLINK_SAM_KEY != null) {
            stmt.bindString(4, EZLINK_SAM_KEY);
        }
 
        String EZLINK_PAYMENT_TRP = entity.getEZLINK_PAYMENT_TRP();
        if (EZLINK_PAYMENT_TRP != null) {
            stmt.bindString(5, EZLINK_PAYMENT_TRP);
        }
 
        String EZLINK_TOPUP_TRP = entity.getEZLINK_TOPUP_TRP();
        if (EZLINK_TOPUP_TRP != null) {
            stmt.bindString(6, EZLINK_TOPUP_TRP);
        }
 
        String EZLINK_PAYMENT_DEVICE_TYPE = entity.getEZLINK_PAYMENT_DEVICE_TYPE();
        if (EZLINK_PAYMENT_DEVICE_TYPE != null) {
            stmt.bindString(7, EZLINK_PAYMENT_DEVICE_TYPE);
        }
 
        String EZLINK_TOPUP_DEVICE_TYPE = entity.getEZLINK_TOPUP_DEVICE_TYPE();
        if (EZLINK_TOPUP_DEVICE_TYPE != null) {
            stmt.bindString(8, EZLINK_TOPUP_DEVICE_TYPE);
        }
 
        String EZLINK_BLACK_LIST_LAST_UPDATE = entity.getEZLINK_BLACK_LIST_LAST_UPDATE();
        if (EZLINK_BLACK_LIST_LAST_UPDATE != null) {
            stmt.bindString(9, EZLINK_BLACK_LIST_LAST_UPDATE);
        }
 
        String EZLINK_TOPUP_PAYMENT_MODE = entity.getEZLINK_TOPUP_PAYMENT_MODE();
        if (EZLINK_TOPUP_PAYMENT_MODE != null) {
            stmt.bindString(10, EZLINK_TOPUP_PAYMENT_MODE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EZLINK_TABLE entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Ezlink_ID = entity.getEzlink_ID();
        if (Ezlink_ID != null) {
            stmt.bindString(2, Ezlink_ID);
        }
 
        String EZLINK_ENABLE = entity.getEZLINK_ENABLE();
        if (EZLINK_ENABLE != null) {
            stmt.bindString(3, EZLINK_ENABLE);
        }
 
        String EZLINK_SAM_KEY = entity.getEZLINK_SAM_KEY();
        if (EZLINK_SAM_KEY != null) {
            stmt.bindString(4, EZLINK_SAM_KEY);
        }
 
        String EZLINK_PAYMENT_TRP = entity.getEZLINK_PAYMENT_TRP();
        if (EZLINK_PAYMENT_TRP != null) {
            stmt.bindString(5, EZLINK_PAYMENT_TRP);
        }
 
        String EZLINK_TOPUP_TRP = entity.getEZLINK_TOPUP_TRP();
        if (EZLINK_TOPUP_TRP != null) {
            stmt.bindString(6, EZLINK_TOPUP_TRP);
        }
 
        String EZLINK_PAYMENT_DEVICE_TYPE = entity.getEZLINK_PAYMENT_DEVICE_TYPE();
        if (EZLINK_PAYMENT_DEVICE_TYPE != null) {
            stmt.bindString(7, EZLINK_PAYMENT_DEVICE_TYPE);
        }
 
        String EZLINK_TOPUP_DEVICE_TYPE = entity.getEZLINK_TOPUP_DEVICE_TYPE();
        if (EZLINK_TOPUP_DEVICE_TYPE != null) {
            stmt.bindString(8, EZLINK_TOPUP_DEVICE_TYPE);
        }
 
        String EZLINK_BLACK_LIST_LAST_UPDATE = entity.getEZLINK_BLACK_LIST_LAST_UPDATE();
        if (EZLINK_BLACK_LIST_LAST_UPDATE != null) {
            stmt.bindString(9, EZLINK_BLACK_LIST_LAST_UPDATE);
        }
 
        String EZLINK_TOPUP_PAYMENT_MODE = entity.getEZLINK_TOPUP_PAYMENT_MODE();
        if (EZLINK_TOPUP_PAYMENT_MODE != null) {
            stmt.bindString(10, EZLINK_TOPUP_PAYMENT_MODE);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EZLINK_TABLE readEntity(Cursor cursor, int offset) {
        EZLINK_TABLE entity = new EZLINK_TABLE( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Ezlink_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // EZLINK_ENABLE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EZLINK_SAM_KEY
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EZLINK_PAYMENT_TRP
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // EZLINK_TOPUP_TRP
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // EZLINK_PAYMENT_DEVICE_TYPE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // EZLINK_TOPUP_DEVICE_TYPE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // EZLINK_BLACK_LIST_LAST_UPDATE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // EZLINK_TOPUP_PAYMENT_MODE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EZLINK_TABLE entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEzlink_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEZLINK_ENABLE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEZLINK_SAM_KEY(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEZLINK_PAYMENT_TRP(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEZLINK_TOPUP_TRP(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEZLINK_PAYMENT_DEVICE_TYPE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEZLINK_TOPUP_DEVICE_TYPE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEZLINK_BLACK_LIST_LAST_UPDATE(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEZLINK_TOPUP_PAYMENT_MODE(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EZLINK_TABLE entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EZLINK_TABLE entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EZLINK_TABLE entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
