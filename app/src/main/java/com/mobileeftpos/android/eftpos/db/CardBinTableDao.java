package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_BIN_TABLE".
*/
public class CardBinTableDao extends AbstractDao<CardBinTable, Long> {

    public static final String TABLENAME = "CARD_BIN_TABLE";

    /**
     * Properties of entity CardBinTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CDT_ID = new Property(1, String.class, "CDT_ID", false, "CDT__ID");
        public final static Property CDT_LO_RANGE = new Property(2, String.class, "CDT_LO_RANGE", false, "CDT__LO__RANGE");
        public final static Property CDT_HI_RANGE = new Property(3, String.class, "CDT_HI_RANGE", false, "CDT__HI__RANGE");
        public final static Property CDT_HDT_REFERENCE = new Property(4, String.class, "CDT_HDT_REFERENCE", false, "CDT__HDT__REFERENCE");
        public final static Property CDT_CARD_TYPE_ARRAY = new Property(5, String.class, "CDT_CARD_TYPE_ARRAY", false, "CDT__CARD__TYPE__ARRAY");
        public final static Property CDT_CARD_NAME = new Property(6, String.class, "CDT_CARD_NAME", false, "CDT__CARD__NAME");
    }


    public CardBinTableDao(DaoConfig config) {
        super(config);
    }
    
    public CardBinTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_BIN_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CDT__ID\" TEXT," + // 1: CDT_ID
                "\"CDT__LO__RANGE\" TEXT," + // 2: CDT_LO_RANGE
                "\"CDT__HI__RANGE\" TEXT," + // 3: CDT_HI_RANGE
                "\"CDT__HDT__REFERENCE\" TEXT," + // 4: CDT_HDT_REFERENCE
                "\"CDT__CARD__TYPE__ARRAY\" TEXT," + // 5: CDT_CARD_TYPE_ARRAY
                "\"CDT__CARD__NAME\" TEXT);"); // 6: CDT_CARD_NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_BIN_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardBinTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CDT_ID = entity.getCDT_ID();
        if (CDT_ID != null) {
            stmt.bindString(2, CDT_ID);
        }
 
        String CDT_LO_RANGE = entity.getCDT_LO_RANGE();
        if (CDT_LO_RANGE != null) {
            stmt.bindString(3, CDT_LO_RANGE);
        }
 
        String CDT_HI_RANGE = entity.getCDT_HI_RANGE();
        if (CDT_HI_RANGE != null) {
            stmt.bindString(4, CDT_HI_RANGE);
        }
 
        String CDT_HDT_REFERENCE = entity.getCDT_HDT_REFERENCE();
        if (CDT_HDT_REFERENCE != null) {
            stmt.bindString(5, CDT_HDT_REFERENCE);
        }
 
        String CDT_CARD_TYPE_ARRAY = entity.getCDT_CARD_TYPE_ARRAY();
        if (CDT_CARD_TYPE_ARRAY != null) {
            stmt.bindString(6, CDT_CARD_TYPE_ARRAY);
        }
 
        String CDT_CARD_NAME = entity.getCDT_CARD_NAME();
        if (CDT_CARD_NAME != null) {
            stmt.bindString(7, CDT_CARD_NAME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardBinTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CDT_ID = entity.getCDT_ID();
        if (CDT_ID != null) {
            stmt.bindString(2, CDT_ID);
        }
 
        String CDT_LO_RANGE = entity.getCDT_LO_RANGE();
        if (CDT_LO_RANGE != null) {
            stmt.bindString(3, CDT_LO_RANGE);
        }
 
        String CDT_HI_RANGE = entity.getCDT_HI_RANGE();
        if (CDT_HI_RANGE != null) {
            stmt.bindString(4, CDT_HI_RANGE);
        }
 
        String CDT_HDT_REFERENCE = entity.getCDT_HDT_REFERENCE();
        if (CDT_HDT_REFERENCE != null) {
            stmt.bindString(5, CDT_HDT_REFERENCE);
        }
 
        String CDT_CARD_TYPE_ARRAY = entity.getCDT_CARD_TYPE_ARRAY();
        if (CDT_CARD_TYPE_ARRAY != null) {
            stmt.bindString(6, CDT_CARD_TYPE_ARRAY);
        }
 
        String CDT_CARD_NAME = entity.getCDT_CARD_NAME();
        if (CDT_CARD_NAME != null) {
            stmt.bindString(7, CDT_CARD_NAME);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CardBinTable readEntity(Cursor cursor, int offset) {
        CardBinTable entity = new CardBinTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CDT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CDT_LO_RANGE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CDT_HI_RANGE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CDT_HDT_REFERENCE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CDT_CARD_TYPE_ARRAY
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // CDT_CARD_NAME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardBinTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCDT_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCDT_LO_RANGE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCDT_HI_RANGE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCDT_HDT_REFERENCE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCDT_CARD_TYPE_ARRAY(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCDT_CARD_NAME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CardBinTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CardBinTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CardBinTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
