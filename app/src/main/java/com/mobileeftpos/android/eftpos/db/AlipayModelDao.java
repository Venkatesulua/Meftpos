package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALIPAY_MODEL".
*/
public class AlipayModelDao extends AbstractDao<AlipayModel, Long> {

    public static final String TABLENAME = "ALIPAY_MODEL";

    /**
     * Properties of entity AlipayModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ALIPAY_ID = new Property(1, String.class, "ALIPAY_ID", false, "ALIPAY__ID");
        public final static Property PARTNER_ID = new Property(2, String.class, "PARTNER_ID", false, "PARTNER__ID");
        public final static Property SELLER_ID = new Property(3, String.class, "SELLER_ID", false, "SELLER__ID");
        public final static Property REGION_CODE = new Property(4, String.class, "REGION_CODE", false, "REGION__CODE");
    }


    public AlipayModelDao(DaoConfig config) {
        super(config);
    }
    
    public AlipayModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALIPAY_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ALIPAY__ID\" TEXT," + // 1: ALIPAY_ID
                "\"PARTNER__ID\" TEXT," + // 2: PARTNER_ID
                "\"SELLER__ID\" TEXT," + // 3: SELLER_ID
                "\"REGION__CODE\" TEXT);"); // 4: REGION_CODE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALIPAY_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlipayModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ALIPAY_ID = entity.getALIPAY_ID();
        if (ALIPAY_ID != null) {
            stmt.bindString(2, ALIPAY_ID);
        }
 
        String PARTNER_ID = entity.getPARTNER_ID();
        if (PARTNER_ID != null) {
            stmt.bindString(3, PARTNER_ID);
        }
 
        String SELLER_ID = entity.getSELLER_ID();
        if (SELLER_ID != null) {
            stmt.bindString(4, SELLER_ID);
        }
 
        String REGION_CODE = entity.getREGION_CODE();
        if (REGION_CODE != null) {
            stmt.bindString(5, REGION_CODE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlipayModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ALIPAY_ID = entity.getALIPAY_ID();
        if (ALIPAY_ID != null) {
            stmt.bindString(2, ALIPAY_ID);
        }
 
        String PARTNER_ID = entity.getPARTNER_ID();
        if (PARTNER_ID != null) {
            stmt.bindString(3, PARTNER_ID);
        }
 
        String SELLER_ID = entity.getSELLER_ID();
        if (SELLER_ID != null) {
            stmt.bindString(4, SELLER_ID);
        }
 
        String REGION_CODE = entity.getREGION_CODE();
        if (REGION_CODE != null) {
            stmt.bindString(5, REGION_CODE);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AlipayModel readEntity(Cursor cursor, int offset) {
        AlipayModel entity = new AlipayModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ALIPAY_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PARTNER_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SELLER_ID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // REGION_CODE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlipayModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setALIPAY_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPARTNER_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSELLER_ID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setREGION_CODE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlipayModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlipayModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlipayModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
