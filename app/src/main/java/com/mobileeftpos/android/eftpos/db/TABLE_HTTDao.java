package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE__HTT".
*/
public class TABLE_HTTDao extends AbstractDao<TABLE_HTT, Long> {

    public static final String TABLENAME = "TABLE__HTT";

    /**
     * Properties of entity TABLE_HTT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HTT_ID = new Property(1, String.class, "HTT_ID", false, "HTT__ID");
        public final static Property TRANSMISSION_MODE = new Property(2, String.class, "TRANSMISSION_MODE", false, "TRANSMISSION__MODE");
        public final static Property CONNECTION_TIMEOUT = new Property(3, String.class, "CONNECTION_TIMEOUT", false, "CONNECTION__TIMEOUT");
        public final static Property REDIAL_TIMEOUT = new Property(4, String.class, "REDIAL_TIMEOUT", false, "REDIAL__TIMEOUT");
        public final static Property PABX = new Property(5, String.class, "PABX", false, "PABX");
        public final static Property MODEM_STRING = new Property(6, String.class, "MODEM_STRING", false, "MODEM__STRING");
        public final static Property REPORTTABLE_ID = new Property(7, String.class, "REPORTTABLE_ID", false, "REPORTTABLE__ID");
        public final static Property DETAILED_REPORT = new Property(8, String.class, "DETAILED_REPORT", false, "DETAILED__REPORT");
        public final static Property TIP_REPORT = new Property(9, String.class, "TIP_REPORT", false, "TIP__REPORT");
        public final static Property TOTAL_REPORT = new Property(10, String.class, "TOTAL_REPORT", false, "TOTAL__REPORT");
    }


    public TABLE_HTTDao(DaoConfig config) {
        super(config);
    }
    
    public TABLE_HTTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE__HTT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HTT__ID\" TEXT," + // 1: HTT_ID
                "\"TRANSMISSION__MODE\" TEXT," + // 2: TRANSMISSION_MODE
                "\"CONNECTION__TIMEOUT\" TEXT," + // 3: CONNECTION_TIMEOUT
                "\"REDIAL__TIMEOUT\" TEXT," + // 4: REDIAL_TIMEOUT
                "\"PABX\" TEXT," + // 5: PABX
                "\"MODEM__STRING\" TEXT," + // 6: MODEM_STRING
                "\"REPORTTABLE__ID\" TEXT," + // 7: REPORTTABLE_ID
                "\"DETAILED__REPORT\" TEXT," + // 8: DETAILED_REPORT
                "\"TIP__REPORT\" TEXT," + // 9: TIP_REPORT
                "\"TOTAL__REPORT\" TEXT);"); // 10: TOTAL_REPORT
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE__HTT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TABLE_HTT entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String HTT_ID = entity.getHTT_ID();
        if (HTT_ID != null) {
            stmt.bindString(2, HTT_ID);
        }
 
        String TRANSMISSION_MODE = entity.getTRANSMISSION_MODE();
        if (TRANSMISSION_MODE != null) {
            stmt.bindString(3, TRANSMISSION_MODE);
        }
 
        String CONNECTION_TIMEOUT = entity.getCONNECTION_TIMEOUT();
        if (CONNECTION_TIMEOUT != null) {
            stmt.bindString(4, CONNECTION_TIMEOUT);
        }
 
        String REDIAL_TIMEOUT = entity.getREDIAL_TIMEOUT();
        if (REDIAL_TIMEOUT != null) {
            stmt.bindString(5, REDIAL_TIMEOUT);
        }
 
        String PABX = entity.getPABX();
        if (PABX != null) {
            stmt.bindString(6, PABX);
        }
 
        String MODEM_STRING = entity.getMODEM_STRING();
        if (MODEM_STRING != null) {
            stmt.bindString(7, MODEM_STRING);
        }
 
        String REPORTTABLE_ID = entity.getREPORTTABLE_ID();
        if (REPORTTABLE_ID != null) {
            stmt.bindString(8, REPORTTABLE_ID);
        }
 
        String DETAILED_REPORT = entity.getDETAILED_REPORT();
        if (DETAILED_REPORT != null) {
            stmt.bindString(9, DETAILED_REPORT);
        }
 
        String TIP_REPORT = entity.getTIP_REPORT();
        if (TIP_REPORT != null) {
            stmt.bindString(10, TIP_REPORT);
        }
 
        String TOTAL_REPORT = entity.getTOTAL_REPORT();
        if (TOTAL_REPORT != null) {
            stmt.bindString(11, TOTAL_REPORT);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TABLE_HTT entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String HTT_ID = entity.getHTT_ID();
        if (HTT_ID != null) {
            stmt.bindString(2, HTT_ID);
        }
 
        String TRANSMISSION_MODE = entity.getTRANSMISSION_MODE();
        if (TRANSMISSION_MODE != null) {
            stmt.bindString(3, TRANSMISSION_MODE);
        }
 
        String CONNECTION_TIMEOUT = entity.getCONNECTION_TIMEOUT();
        if (CONNECTION_TIMEOUT != null) {
            stmt.bindString(4, CONNECTION_TIMEOUT);
        }
 
        String REDIAL_TIMEOUT = entity.getREDIAL_TIMEOUT();
        if (REDIAL_TIMEOUT != null) {
            stmt.bindString(5, REDIAL_TIMEOUT);
        }
 
        String PABX = entity.getPABX();
        if (PABX != null) {
            stmt.bindString(6, PABX);
        }
 
        String MODEM_STRING = entity.getMODEM_STRING();
        if (MODEM_STRING != null) {
            stmt.bindString(7, MODEM_STRING);
        }
 
        String REPORTTABLE_ID = entity.getREPORTTABLE_ID();
        if (REPORTTABLE_ID != null) {
            stmt.bindString(8, REPORTTABLE_ID);
        }
 
        String DETAILED_REPORT = entity.getDETAILED_REPORT();
        if (DETAILED_REPORT != null) {
            stmt.bindString(9, DETAILED_REPORT);
        }
 
        String TIP_REPORT = entity.getTIP_REPORT();
        if (TIP_REPORT != null) {
            stmt.bindString(10, TIP_REPORT);
        }
 
        String TOTAL_REPORT = entity.getTOTAL_REPORT();
        if (TOTAL_REPORT != null) {
            stmt.bindString(11, TOTAL_REPORT);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TABLE_HTT readEntity(Cursor cursor, int offset) {
        TABLE_HTT entity = new TABLE_HTT( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // HTT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TRANSMISSION_MODE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CONNECTION_TIMEOUT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // REDIAL_TIMEOUT
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PABX
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // MODEM_STRING
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // REPORTTABLE_ID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // DETAILED_REPORT
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // TIP_REPORT
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // TOTAL_REPORT
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TABLE_HTT entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHTT_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTRANSMISSION_MODE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCONNECTION_TIMEOUT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setREDIAL_TIMEOUT(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPABX(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMODEM_STRING(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setREPORTTABLE_ID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDETAILED_REPORT(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTIP_REPORT(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTOTAL_REPORT(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TABLE_HTT entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TABLE_HTT entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TABLE_HTT entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
