package com.mobileeftpos.android.eftpos.db;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.mobileeftpos.android.eftpos.db.HostTable;
import com.mobileeftpos.android.eftpos.db.CardBinTable;
import com.mobileeftpos.android.eftpos.db.CardTypeTable;
import com.mobileeftpos.android.eftpos.db.PasswordTable;
import com.mobileeftpos.android.eftpos.db.Batch;
import com.mobileeftpos.android.eftpos.db.ALIPAY;
import com.mobileeftpos.android.eftpos.db.ReceiptTable;
import com.mobileeftpos.android.eftpos.db.UtilityTable;
import com.mobileeftpos.android.eftpos.db.MaskingTable;
import com.mobileeftpos.android.eftpos.db.LimitTable;
import com.mobileeftpos.android.eftpos.db.EthernetTable;
import com.mobileeftpos.android.eftpos.db.CurrencyTable;
import com.mobileeftpos.android.eftpos.db.TransactionControlTable;
import com.mobileeftpos.android.eftpos.db.EZLINK_TABLE;
import com.mobileeftpos.android.eftpos.db.COMMS_TABLE;
import com.mobileeftpos.android.eftpos.db.Trace;
import com.mobileeftpos.android.eftpos.db.TABLE_HTT;
import com.mobileeftpos.android.eftpos.db.MerchantTable;
import com.mobileeftpos.android.eftpos.db.TABLE_REPORT;

import com.mobileeftpos.android.eftpos.db.HostTableDao;
import com.mobileeftpos.android.eftpos.db.CardBinTableDao;
import com.mobileeftpos.android.eftpos.db.CardTypeTableDao;
import com.mobileeftpos.android.eftpos.db.PasswordTableDao;
import com.mobileeftpos.android.eftpos.db.BatchDao;
import com.mobileeftpos.android.eftpos.db.ALIPAYDao;
import com.mobileeftpos.android.eftpos.db.ReceiptTableDao;
import com.mobileeftpos.android.eftpos.db.UtilityTableDao;
import com.mobileeftpos.android.eftpos.db.MaskingTableDao;
import com.mobileeftpos.android.eftpos.db.LimitTableDao;
import com.mobileeftpos.android.eftpos.db.EthernetTableDao;
import com.mobileeftpos.android.eftpos.db.CurrencyTableDao;
import com.mobileeftpos.android.eftpos.db.TransactionControlTableDao;
import com.mobileeftpos.android.eftpos.db.EZLINK_TABLEDao;
import com.mobileeftpos.android.eftpos.db.COMMS_TABLEDao;
import com.mobileeftpos.android.eftpos.db.TraceDao;
import com.mobileeftpos.android.eftpos.db.TABLE_HTTDao;
import com.mobileeftpos.android.eftpos.db.MerchantTableDao;
import com.mobileeftpos.android.eftpos.db.TABLE_REPORTDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig hostTableDaoConfig;
    private final DaoConfig cardBinTableDaoConfig;
    private final DaoConfig cardTypeTableDaoConfig;
    private final DaoConfig passwordTableDaoConfig;
    private final DaoConfig batchDaoConfig;
    private final DaoConfig aLIPAYDaoConfig;
    private final DaoConfig receiptTableDaoConfig;
    private final DaoConfig utilityTableDaoConfig;
    private final DaoConfig maskingTableDaoConfig;
    private final DaoConfig limitTableDaoConfig;
    private final DaoConfig ethernetTableDaoConfig;
    private final DaoConfig currencyTableDaoConfig;
    private final DaoConfig transactionControlTableDaoConfig;
    private final DaoConfig eZLINK_TABLEDaoConfig;
    private final DaoConfig cOMMS_TABLEDaoConfig;
    private final DaoConfig traceDaoConfig;
    private final DaoConfig tABLE_HTTDaoConfig;
    private final DaoConfig merchantTableDaoConfig;
    private final DaoConfig tABLE_REPORTDaoConfig;

    private final HostTableDao hostTableDao;
    private final CardBinTableDao cardBinTableDao;
    private final CardTypeTableDao cardTypeTableDao;
    private final PasswordTableDao passwordTableDao;
    private final BatchDao batchDao;
    private final ALIPAYDao aLIPAYDao;
    private final ReceiptTableDao receiptTableDao;
    private final UtilityTableDao utilityTableDao;
    private final MaskingTableDao maskingTableDao;
    private final LimitTableDao limitTableDao;
    private final EthernetTableDao ethernetTableDao;
    private final CurrencyTableDao currencyTableDao;
    private final TransactionControlTableDao transactionControlTableDao;
    private final EZLINK_TABLEDao eZLINK_TABLEDao;
    private final COMMS_TABLEDao cOMMS_TABLEDao;
    private final TraceDao traceDao;
    private final TABLE_HTTDao tABLE_HTTDao;
    private final MerchantTableDao merchantTableDao;
    private final TABLE_REPORTDao tABLE_REPORTDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        hostTableDaoConfig = daoConfigMap.get(HostTableDao.class).clone();
        hostTableDaoConfig.initIdentityScope(type);

        cardBinTableDaoConfig = daoConfigMap.get(CardBinTableDao.class).clone();
        cardBinTableDaoConfig.initIdentityScope(type);

        cardTypeTableDaoConfig = daoConfigMap.get(CardTypeTableDao.class).clone();
        cardTypeTableDaoConfig.initIdentityScope(type);

        passwordTableDaoConfig = daoConfigMap.get(PasswordTableDao.class).clone();
        passwordTableDaoConfig.initIdentityScope(type);

        batchDaoConfig = daoConfigMap.get(BatchDao.class).clone();
        batchDaoConfig.initIdentityScope(type);

        aLIPAYDaoConfig = daoConfigMap.get(ALIPAYDao.class).clone();
        aLIPAYDaoConfig.initIdentityScope(type);

        receiptTableDaoConfig = daoConfigMap.get(ReceiptTableDao.class).clone();
        receiptTableDaoConfig.initIdentityScope(type);

        utilityTableDaoConfig = daoConfigMap.get(UtilityTableDao.class).clone();
        utilityTableDaoConfig.initIdentityScope(type);

        maskingTableDaoConfig = daoConfigMap.get(MaskingTableDao.class).clone();
        maskingTableDaoConfig.initIdentityScope(type);

        limitTableDaoConfig = daoConfigMap.get(LimitTableDao.class).clone();
        limitTableDaoConfig.initIdentityScope(type);

        ethernetTableDaoConfig = daoConfigMap.get(EthernetTableDao.class).clone();
        ethernetTableDaoConfig.initIdentityScope(type);

        currencyTableDaoConfig = daoConfigMap.get(CurrencyTableDao.class).clone();
        currencyTableDaoConfig.initIdentityScope(type);

        transactionControlTableDaoConfig = daoConfigMap.get(TransactionControlTableDao.class).clone();
        transactionControlTableDaoConfig.initIdentityScope(type);

        eZLINK_TABLEDaoConfig = daoConfigMap.get(EZLINK_TABLEDao.class).clone();
        eZLINK_TABLEDaoConfig.initIdentityScope(type);

        cOMMS_TABLEDaoConfig = daoConfigMap.get(COMMS_TABLEDao.class).clone();
        cOMMS_TABLEDaoConfig.initIdentityScope(type);

        traceDaoConfig = daoConfigMap.get(TraceDao.class).clone();
        traceDaoConfig.initIdentityScope(type);

        tABLE_HTTDaoConfig = daoConfigMap.get(TABLE_HTTDao.class).clone();
        tABLE_HTTDaoConfig.initIdentityScope(type);

        merchantTableDaoConfig = daoConfigMap.get(MerchantTableDao.class).clone();
        merchantTableDaoConfig.initIdentityScope(type);

        tABLE_REPORTDaoConfig = daoConfigMap.get(TABLE_REPORTDao.class).clone();
        tABLE_REPORTDaoConfig.initIdentityScope(type);

        hostTableDao = new HostTableDao(hostTableDaoConfig, this);
        cardBinTableDao = new CardBinTableDao(cardBinTableDaoConfig, this);
        cardTypeTableDao = new CardTypeTableDao(cardTypeTableDaoConfig, this);
        passwordTableDao = new PasswordTableDao(passwordTableDaoConfig, this);
        batchDao = new BatchDao(batchDaoConfig, this);
        aLIPAYDao = new ALIPAYDao(aLIPAYDaoConfig, this);
        receiptTableDao = new ReceiptTableDao(receiptTableDaoConfig, this);
        utilityTableDao = new UtilityTableDao(utilityTableDaoConfig, this);
        maskingTableDao = new MaskingTableDao(maskingTableDaoConfig, this);
        limitTableDao = new LimitTableDao(limitTableDaoConfig, this);
        ethernetTableDao = new EthernetTableDao(ethernetTableDaoConfig, this);
        currencyTableDao = new CurrencyTableDao(currencyTableDaoConfig, this);
        transactionControlTableDao = new TransactionControlTableDao(transactionControlTableDaoConfig, this);
        eZLINK_TABLEDao = new EZLINK_TABLEDao(eZLINK_TABLEDaoConfig, this);
        cOMMS_TABLEDao = new COMMS_TABLEDao(cOMMS_TABLEDaoConfig, this);
        traceDao = new TraceDao(traceDaoConfig, this);
        tABLE_HTTDao = new TABLE_HTTDao(tABLE_HTTDaoConfig, this);
        merchantTableDao = new MerchantTableDao(merchantTableDaoConfig, this);
        tABLE_REPORTDao = new TABLE_REPORTDao(tABLE_REPORTDaoConfig, this);

        registerDao(HostTable.class, hostTableDao);
        registerDao(CardBinTable.class, cardBinTableDao);
        registerDao(CardTypeTable.class, cardTypeTableDao);
        registerDao(PasswordTable.class, passwordTableDao);
        registerDao(Batch.class, batchDao);
        registerDao(ALIPAY.class, aLIPAYDao);
        registerDao(ReceiptTable.class, receiptTableDao);
        registerDao(UtilityTable.class, utilityTableDao);
        registerDao(MaskingTable.class, maskingTableDao);
        registerDao(LimitTable.class, limitTableDao);
        registerDao(EthernetTable.class, ethernetTableDao);
        registerDao(CurrencyTable.class, currencyTableDao);
        registerDao(TransactionControlTable.class, transactionControlTableDao);
        registerDao(EZLINK_TABLE.class, eZLINK_TABLEDao);
        registerDao(COMMS_TABLE.class, cOMMS_TABLEDao);
        registerDao(Trace.class, traceDao);
        registerDao(TABLE_HTT.class, tABLE_HTTDao);
        registerDao(MerchantTable.class, merchantTableDao);
        registerDao(TABLE_REPORT.class, tABLE_REPORTDao);
    }
    
    public void clear() {
        hostTableDaoConfig.clearIdentityScope();
        cardBinTableDaoConfig.clearIdentityScope();
        cardTypeTableDaoConfig.clearIdentityScope();
        passwordTableDaoConfig.clearIdentityScope();
        batchDaoConfig.clearIdentityScope();
        aLIPAYDaoConfig.clearIdentityScope();
        receiptTableDaoConfig.clearIdentityScope();
        utilityTableDaoConfig.clearIdentityScope();
        maskingTableDaoConfig.clearIdentityScope();
        limitTableDaoConfig.clearIdentityScope();
        ethernetTableDaoConfig.clearIdentityScope();
        currencyTableDaoConfig.clearIdentityScope();
        transactionControlTableDaoConfig.clearIdentityScope();
        eZLINK_TABLEDaoConfig.clearIdentityScope();
        cOMMS_TABLEDaoConfig.clearIdentityScope();
        traceDaoConfig.clearIdentityScope();
        tABLE_HTTDaoConfig.clearIdentityScope();
        merchantTableDaoConfig.clearIdentityScope();
        tABLE_REPORTDaoConfig.clearIdentityScope();
    }

    public HostTableDao getHostTableDao() {
        return hostTableDao;
    }

    public CardBinTableDao getCardBinTableDao() {
        return cardBinTableDao;
    }

    public CardTypeTableDao getCardTypeTableDao() {
        return cardTypeTableDao;
    }

    public PasswordTableDao getPasswordTableDao() {
        return passwordTableDao;
    }

    public BatchDao getBatchDao() {
        return batchDao;
    }

    public ALIPAYDao getALIPAYDao() {
        return aLIPAYDao;
    }

    public ReceiptTableDao getReceiptTableDao() {
        return receiptTableDao;
    }

    public UtilityTableDao getUtilityTableDao() {
        return utilityTableDao;
    }

    public MaskingTableDao getMaskingTableDao() {
        return maskingTableDao;
    }

    public LimitTableDao getLimitTableDao() {
        return limitTableDao;
    }

    public EthernetTableDao getEthernetTableDao() {
        return ethernetTableDao;
    }

    public CurrencyTableDao getCurrencyTableDao() {
        return currencyTableDao;
    }

    public TransactionControlTableDao getTransactionControlTableDao() {
        return transactionControlTableDao;
    }

    public EZLINK_TABLEDao getEZLINK_TABLEDao() {
        return eZLINK_TABLEDao;
    }

    public COMMS_TABLEDao getCOMMS_TABLEDao() {
        return cOMMS_TABLEDao;
    }

    public TraceDao getTraceDao() {
        return traceDao;
    }

    public TABLE_HTTDao getTABLE_HTTDao() {
        return tABLE_HTTDao;
    }

    public MerchantTableDao getMerchantTableDao() {
        return merchantTableDao;
    }

    public TABLE_REPORTDao getTABLE_REPORTDao() {
        return tABLE_REPORTDao;
    }

}
