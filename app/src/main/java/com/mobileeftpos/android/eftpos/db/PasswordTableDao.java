package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PASSWORD_TABLE".
*/
public class PasswordTableDao extends AbstractDao<PasswordTable, Long> {

    public static final String TABLENAME = "PASSWORD_TABLE";

    /**
     * Properties of entity PasswordTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PWD_ID = new Property(1, String.class, "PWD_ID", false, "PWD__ID");
        public final static Property DEFAULT_PASSWORD = new Property(2, String.class, "DEFAULT_PASSWORD", false, "DEFAULT__PASSWORD");
        public final static Property REFUND_PASWORD = new Property(3, String.class, "REFUND_PASWORD", false, "REFUND__PASWORD");
        public final static Property TIP_ADJUST_PASSWORD = new Property(4, String.class, "TIP_ADJUST_PASSWORD", false, "TIP__ADJUST__PASSWORD");
        public final static Property PRE_AUTH_PASSWORD = new Property(5, String.class, "PRE_AUTH_PASSWORD", false, "PRE__AUTH__PASSWORD");
        public final static Property BALANCE_PASSWORD = new Property(6, String.class, "BALANCE_PASSWORD", false, "BALANCE__PASSWORD");
        public final static Property OFFLINE_PASSWORD = new Property(7, String.class, "OFFLINE_PASSWORD", false, "OFFLINE__PASSWORD");
        public final static Property SETTLEMENT_PASSWORD = new Property(8, String.class, "SETTLEMENT_PASSWORD", false, "SETTLEMENT__PASSWORD");
        public final static Property EDITOR_PASSWORD = new Property(9, String.class, "EDITOR_PASSWORD", false, "EDITOR__PASSWORD");
        public final static Property VOID_PASSWORD = new Property(10, String.class, "VOID_PASSWORD", false, "VOID__PASSWORD");
        public final static Property MANUAL_ENTRY_PASSWORD = new Property(11, String.class, "MANUAL_ENTRY_PASSWORD", false, "MANUAL__ENTRY__PASSWORD");
        public final static Property CASH_ADVANCED_PASSWORD = new Property(12, String.class, "CASH_ADVANCED_PASSWORD", false, "CASH__ADVANCED__PASSWORD");
        public final static Property TERMINAL_POWERON_PASSWORD = new Property(13, String.class, "TERMINAL_POWERON_PASSWORD", false, "TERMINAL__POWERON__PASSWORD");
    }


    public PasswordTableDao(DaoConfig config) {
        super(config);
    }
    
    public PasswordTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PASSWORD_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PWD__ID\" TEXT," + // 1: PWD_ID
                "\"DEFAULT__PASSWORD\" TEXT," + // 2: DEFAULT_PASSWORD
                "\"REFUND__PASWORD\" TEXT," + // 3: REFUND_PASWORD
                "\"TIP__ADJUST__PASSWORD\" TEXT," + // 4: TIP_ADJUST_PASSWORD
                "\"PRE__AUTH__PASSWORD\" TEXT," + // 5: PRE_AUTH_PASSWORD
                "\"BALANCE__PASSWORD\" TEXT," + // 6: BALANCE_PASSWORD
                "\"OFFLINE__PASSWORD\" TEXT," + // 7: OFFLINE_PASSWORD
                "\"SETTLEMENT__PASSWORD\" TEXT," + // 8: SETTLEMENT_PASSWORD
                "\"EDITOR__PASSWORD\" TEXT," + // 9: EDITOR_PASSWORD
                "\"VOID__PASSWORD\" TEXT," + // 10: VOID_PASSWORD
                "\"MANUAL__ENTRY__PASSWORD\" TEXT," + // 11: MANUAL_ENTRY_PASSWORD
                "\"CASH__ADVANCED__PASSWORD\" TEXT," + // 12: CASH_ADVANCED_PASSWORD
                "\"TERMINAL__POWERON__PASSWORD\" TEXT);"); // 13: TERMINAL_POWERON_PASSWORD
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PASSWORD_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PasswordTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String PWD_ID = entity.getPWD_ID();
        if (PWD_ID != null) {
            stmt.bindString(2, PWD_ID);
        }
 
        String DEFAULT_PASSWORD = entity.getDEFAULT_PASSWORD();
        if (DEFAULT_PASSWORD != null) {
            stmt.bindString(3, DEFAULT_PASSWORD);
        }
 
        String REFUND_PASWORD = entity.getREFUND_PASWORD();
        if (REFUND_PASWORD != null) {
            stmt.bindString(4, REFUND_PASWORD);
        }
 
        String TIP_ADJUST_PASSWORD = entity.getTIP_ADJUST_PASSWORD();
        if (TIP_ADJUST_PASSWORD != null) {
            stmt.bindString(5, TIP_ADJUST_PASSWORD);
        }
 
        String PRE_AUTH_PASSWORD = entity.getPRE_AUTH_PASSWORD();
        if (PRE_AUTH_PASSWORD != null) {
            stmt.bindString(6, PRE_AUTH_PASSWORD);
        }
 
        String BALANCE_PASSWORD = entity.getBALANCE_PASSWORD();
        if (BALANCE_PASSWORD != null) {
            stmt.bindString(7, BALANCE_PASSWORD);
        }
 
        String OFFLINE_PASSWORD = entity.getOFFLINE_PASSWORD();
        if (OFFLINE_PASSWORD != null) {
            stmt.bindString(8, OFFLINE_PASSWORD);
        }
 
        String SETTLEMENT_PASSWORD = entity.getSETTLEMENT_PASSWORD();
        if (SETTLEMENT_PASSWORD != null) {
            stmt.bindString(9, SETTLEMENT_PASSWORD);
        }
 
        String EDITOR_PASSWORD = entity.getEDITOR_PASSWORD();
        if (EDITOR_PASSWORD != null) {
            stmt.bindString(10, EDITOR_PASSWORD);
        }
 
        String VOID_PASSWORD = entity.getVOID_PASSWORD();
        if (VOID_PASSWORD != null) {
            stmt.bindString(11, VOID_PASSWORD);
        }
 
        String MANUAL_ENTRY_PASSWORD = entity.getMANUAL_ENTRY_PASSWORD();
        if (MANUAL_ENTRY_PASSWORD != null) {
            stmt.bindString(12, MANUAL_ENTRY_PASSWORD);
        }
 
        String CASH_ADVANCED_PASSWORD = entity.getCASH_ADVANCED_PASSWORD();
        if (CASH_ADVANCED_PASSWORD != null) {
            stmt.bindString(13, CASH_ADVANCED_PASSWORD);
        }
 
        String TERMINAL_POWERON_PASSWORD = entity.getTERMINAL_POWERON_PASSWORD();
        if (TERMINAL_POWERON_PASSWORD != null) {
            stmt.bindString(14, TERMINAL_POWERON_PASSWORD);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PasswordTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String PWD_ID = entity.getPWD_ID();
        if (PWD_ID != null) {
            stmt.bindString(2, PWD_ID);
        }
 
        String DEFAULT_PASSWORD = entity.getDEFAULT_PASSWORD();
        if (DEFAULT_PASSWORD != null) {
            stmt.bindString(3, DEFAULT_PASSWORD);
        }
 
        String REFUND_PASWORD = entity.getREFUND_PASWORD();
        if (REFUND_PASWORD != null) {
            stmt.bindString(4, REFUND_PASWORD);
        }
 
        String TIP_ADJUST_PASSWORD = entity.getTIP_ADJUST_PASSWORD();
        if (TIP_ADJUST_PASSWORD != null) {
            stmt.bindString(5, TIP_ADJUST_PASSWORD);
        }
 
        String PRE_AUTH_PASSWORD = entity.getPRE_AUTH_PASSWORD();
        if (PRE_AUTH_PASSWORD != null) {
            stmt.bindString(6, PRE_AUTH_PASSWORD);
        }
 
        String BALANCE_PASSWORD = entity.getBALANCE_PASSWORD();
        if (BALANCE_PASSWORD != null) {
            stmt.bindString(7, BALANCE_PASSWORD);
        }
 
        String OFFLINE_PASSWORD = entity.getOFFLINE_PASSWORD();
        if (OFFLINE_PASSWORD != null) {
            stmt.bindString(8, OFFLINE_PASSWORD);
        }
 
        String SETTLEMENT_PASSWORD = entity.getSETTLEMENT_PASSWORD();
        if (SETTLEMENT_PASSWORD != null) {
            stmt.bindString(9, SETTLEMENT_PASSWORD);
        }
 
        String EDITOR_PASSWORD = entity.getEDITOR_PASSWORD();
        if (EDITOR_PASSWORD != null) {
            stmt.bindString(10, EDITOR_PASSWORD);
        }
 
        String VOID_PASSWORD = entity.getVOID_PASSWORD();
        if (VOID_PASSWORD != null) {
            stmt.bindString(11, VOID_PASSWORD);
        }
 
        String MANUAL_ENTRY_PASSWORD = entity.getMANUAL_ENTRY_PASSWORD();
        if (MANUAL_ENTRY_PASSWORD != null) {
            stmt.bindString(12, MANUAL_ENTRY_PASSWORD);
        }
 
        String CASH_ADVANCED_PASSWORD = entity.getCASH_ADVANCED_PASSWORD();
        if (CASH_ADVANCED_PASSWORD != null) {
            stmt.bindString(13, CASH_ADVANCED_PASSWORD);
        }
 
        String TERMINAL_POWERON_PASSWORD = entity.getTERMINAL_POWERON_PASSWORD();
        if (TERMINAL_POWERON_PASSWORD != null) {
            stmt.bindString(14, TERMINAL_POWERON_PASSWORD);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PasswordTable readEntity(Cursor cursor, int offset) {
        PasswordTable entity = new PasswordTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PWD_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DEFAULT_PASSWORD
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // REFUND_PASWORD
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TIP_ADJUST_PASSWORD
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PRE_AUTH_PASSWORD
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BALANCE_PASSWORD
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // OFFLINE_PASSWORD
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SETTLEMENT_PASSWORD
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // EDITOR_PASSWORD
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // VOID_PASSWORD
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // MANUAL_ENTRY_PASSWORD
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // CASH_ADVANCED_PASSWORD
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // TERMINAL_POWERON_PASSWORD
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PasswordTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPWD_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDEFAULT_PASSWORD(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setREFUND_PASWORD(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTIP_ADJUST_PASSWORD(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPRE_AUTH_PASSWORD(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBALANCE_PASSWORD(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOFFLINE_PASSWORD(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSETTLEMENT_PASSWORD(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEDITOR_PASSWORD(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVOID_PASSWORD(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMANUAL_ENTRY_PASSWORD(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCASH_ADVANCED_PASSWORD(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTERMINAL_POWERON_PASSWORD(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PasswordTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PasswordTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PasswordTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
