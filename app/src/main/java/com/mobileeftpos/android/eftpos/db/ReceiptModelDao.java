package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECEIPT_MODEL".
*/
public class ReceiptModelDao extends AbstractDao<ReceiptModel, Long> {

    public static final String TABLENAME = "RECEIPT_MODEL";

    /**
     * Properties of entity ReceiptModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RECEIPT_ID = new Property(1, String.class, "RECEIPT_ID", false, "RECEIPT__ID");
        public final static Property PRINT_TIMEOUT = new Property(2, String.class, "PRINT_TIMEOUT", false, "PRINT__TIMEOUT");
        public final static Property AUTO_PRINT = new Property(3, String.class, "AUTO_PRINT", false, "AUTO__PRINT");
        public final static Property PRINTER_INTENSITY_CFG = new Property(4, String.class, "PRINTER_INTENSITY_CFG", false, "PRINTER__INTENSITY__CFG");
        public final static Property PRINTER_CFG = new Property(5, String.class, "PRINTER_CFG", false, "PRINTER__CFG");
    }


    public ReceiptModelDao(DaoConfig config) {
        super(config);
    }
    
    public ReceiptModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECEIPT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RECEIPT__ID\" TEXT," + // 1: RECEIPT_ID
                "\"PRINT__TIMEOUT\" TEXT," + // 2: PRINT_TIMEOUT
                "\"AUTO__PRINT\" TEXT," + // 3: AUTO_PRINT
                "\"PRINTER__INTENSITY__CFG\" TEXT," + // 4: PRINTER_INTENSITY_CFG
                "\"PRINTER__CFG\" TEXT);"); // 5: PRINTER_CFG
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECEIPT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReceiptModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String RECEIPT_ID = entity.getRECEIPT_ID();
        if (RECEIPT_ID != null) {
            stmt.bindString(2, RECEIPT_ID);
        }
 
        String PRINT_TIMEOUT = entity.getPRINT_TIMEOUT();
        if (PRINT_TIMEOUT != null) {
            stmt.bindString(3, PRINT_TIMEOUT);
        }
 
        String AUTO_PRINT = entity.getAUTO_PRINT();
        if (AUTO_PRINT != null) {
            stmt.bindString(4, AUTO_PRINT);
        }
 
        String PRINTER_INTENSITY_CFG = entity.getPRINTER_INTENSITY_CFG();
        if (PRINTER_INTENSITY_CFG != null) {
            stmt.bindString(5, PRINTER_INTENSITY_CFG);
        }
 
        String PRINTER_CFG = entity.getPRINTER_CFG();
        if (PRINTER_CFG != null) {
            stmt.bindString(6, PRINTER_CFG);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReceiptModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String RECEIPT_ID = entity.getRECEIPT_ID();
        if (RECEIPT_ID != null) {
            stmt.bindString(2, RECEIPT_ID);
        }
 
        String PRINT_TIMEOUT = entity.getPRINT_TIMEOUT();
        if (PRINT_TIMEOUT != null) {
            stmt.bindString(3, PRINT_TIMEOUT);
        }
 
        String AUTO_PRINT = entity.getAUTO_PRINT();
        if (AUTO_PRINT != null) {
            stmt.bindString(4, AUTO_PRINT);
        }
 
        String PRINTER_INTENSITY_CFG = entity.getPRINTER_INTENSITY_CFG();
        if (PRINTER_INTENSITY_CFG != null) {
            stmt.bindString(5, PRINTER_INTENSITY_CFG);
        }
 
        String PRINTER_CFG = entity.getPRINTER_CFG();
        if (PRINTER_CFG != null) {
            stmt.bindString(6, PRINTER_CFG);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReceiptModel readEntity(Cursor cursor, int offset) {
        ReceiptModel entity = new ReceiptModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // RECEIPT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PRINT_TIMEOUT
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AUTO_PRINT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PRINTER_INTENSITY_CFG
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // PRINTER_CFG
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReceiptModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRECEIPT_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPRINT_TIMEOUT(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAUTO_PRINT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPRINTER_INTENSITY_CFG(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPRINTER_CFG(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReceiptModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReceiptModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReceiptModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
