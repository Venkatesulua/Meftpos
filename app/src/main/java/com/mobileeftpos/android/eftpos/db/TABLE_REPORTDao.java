package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE__REPORT".
*/
public class TABLE_REPORTDao extends AbstractDao<TABLE_REPORT, Long> {

    public static final String TABLENAME = "TABLE__REPORT";

    /**
     * Properties of entity TABLE_REPORT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property REPORTTABLE_ID = new Property(1, String.class, "REPORTTABLE_ID", false, "REPORTTABLE__ID");
        public final static Property DETAILED_REPORT = new Property(2, String.class, "DETAILED_REPORT", false, "DETAILED__REPORT");
        public final static Property TIP_REPORT = new Property(3, String.class, "TIP_REPORT", false, "TIP__REPORT");
        public final static Property TOTAL_REPORT = new Property(4, String.class, "TOTAL_REPORT", false, "TOTAL__REPORT");
    }


    public TABLE_REPORTDao(DaoConfig config) {
        super(config);
    }
    
    public TABLE_REPORTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE__REPORT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"REPORTTABLE__ID\" TEXT," + // 1: REPORTTABLE_ID
                "\"DETAILED__REPORT\" TEXT," + // 2: DETAILED_REPORT
                "\"TIP__REPORT\" TEXT," + // 3: TIP_REPORT
                "\"TOTAL__REPORT\" TEXT);"); // 4: TOTAL_REPORT
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE__REPORT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TABLE_REPORT entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String REPORTTABLE_ID = entity.getREPORTTABLE_ID();
        if (REPORTTABLE_ID != null) {
            stmt.bindString(2, REPORTTABLE_ID);
        }
 
        String DETAILED_REPORT = entity.getDETAILED_REPORT();
        if (DETAILED_REPORT != null) {
            stmt.bindString(3, DETAILED_REPORT);
        }
 
        String TIP_REPORT = entity.getTIP_REPORT();
        if (TIP_REPORT != null) {
            stmt.bindString(4, TIP_REPORT);
        }
 
        String TOTAL_REPORT = entity.getTOTAL_REPORT();
        if (TOTAL_REPORT != null) {
            stmt.bindString(5, TOTAL_REPORT);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TABLE_REPORT entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String REPORTTABLE_ID = entity.getREPORTTABLE_ID();
        if (REPORTTABLE_ID != null) {
            stmt.bindString(2, REPORTTABLE_ID);
        }
 
        String DETAILED_REPORT = entity.getDETAILED_REPORT();
        if (DETAILED_REPORT != null) {
            stmt.bindString(3, DETAILED_REPORT);
        }
 
        String TIP_REPORT = entity.getTIP_REPORT();
        if (TIP_REPORT != null) {
            stmt.bindString(4, TIP_REPORT);
        }
 
        String TOTAL_REPORT = entity.getTOTAL_REPORT();
        if (TOTAL_REPORT != null) {
            stmt.bindString(5, TOTAL_REPORT);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TABLE_REPORT readEntity(Cursor cursor, int offset) {
        TABLE_REPORT entity = new TABLE_REPORT( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // REPORTTABLE_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DETAILED_REPORT
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TIP_REPORT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // TOTAL_REPORT
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TABLE_REPORT entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setREPORTTABLE_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDETAILED_REPORT(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTIP_REPORT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTOTAL_REPORT(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TABLE_REPORT entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TABLE_REPORT entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TABLE_REPORT entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
