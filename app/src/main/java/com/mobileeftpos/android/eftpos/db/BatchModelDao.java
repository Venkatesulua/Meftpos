package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BATCH_MODEL".
*/
public class BatchModelDao extends AbstractDao<BatchModel, Long> {

    public static final String TABLENAME = "BATCH_MODEL";

    /**
     * Properties of entity BatchModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BATCH_ID = new Property(1, String.class, "BATCH_ID", false, "BATCH__ID");
        public final static Property Hdt_index = new Property(2, String.class, "hdt_index", false, "HDT_INDEX");
        public final static Property Trans_type = new Property(3, String.class, "trans_type", false, "TRANS_TYPE");
        public final static Property Trans_mode = new Property(4, String.class, "trans_mode", false, "TRANS_MODE");
        public final static Property Voided = new Property(5, String.class, "voided", false, "VOIDED");
        public final static Property Reversed = new Property(6, String.class, "reversed", false, "REVERSED");
        public final static Property Uploaded = new Property(7, String.class, "uploaded", false, "UPLOADED");
        public final static Property Proc_code = new Property(8, String.class, "proc_code", false, "PROC_CODE");
        public final static Property Invoice_number = new Property(9, String.class, "invoice_number", false, "INVOICE_NUMBER");
        public final static Property Amount = new Property(10, String.class, "amount", false, "AMOUNT");
        public final static Property Tip_amount = new Property(11, String.class, "tip_amount", false, "TIP_AMOUNT");
        public final static Property Time = new Property(12, String.class, "time", false, "TIME");
        public final static Property Date = new Property(13, String.class, "date", false, "DATE");
        public final static Property Year = new Property(14, String.class, "year", false, "YEAR");
        public final static Property Org_mess_id = new Property(15, String.class, "org_mess_id", false, "ORG_MESS_ID");
        public final static Property Sys_trace_num = new Property(16, String.class, "sys_trace_num", false, "SYS_TRACE_NUM");
        public final static Property Date_exp = new Property(17, String.class, "date_exp", false, "DATE_EXP");
        public final static Property Retr_ref_num = new Property(18, String.class, "retr_ref_num", false, "RETR_REF_NUM");
        public final static Property Auth_id_resp = new Property(19, String.class, "auth_id_resp", false, "AUTH_ID_RESP");
        public final static Property Resp_code = new Property(20, String.class, "resp_code", false, "RESP_CODE");
        public final static Property Acct_number = new Property(21, String.class, "acct_number", false, "ACCT_NUMBER");
        public final static Property Person_name = new Property(22, String.class, "person_name", false, "PERSON_NAME");
        public final static Property Original_amount = new Property(23, String.class, "original_amount", false, "ORIGINAL_AMOUNT");
        public final static Property Additional_data = new Property(24, String.class, "additional_data", false, "ADDITIONAL_DATA");
        public final static Property Payment_term_info = new Property(25, String.class, "payment_term_info", false, "PAYMENT_TERM_INFO");
        public final static Property Pri_acct_num = new Property(26, String.class, "pri_acct_num", false, "PRI_ACCT_NUM");
        public final static Property Pos_ent_mode = new Property(27, String.class, "pos_ent_mode", false, "POS_ENT_MODE");
        public final static Property NII = new Property(28, String.class, "NII", false, "NII");
        public final static Property Pos_cond_code = new Property(29, String.class, "pos_cond_code", false, "POS_COND_CODE");
        public final static Property Add_amount = new Property(30, String.class, "add_amount", false, "ADD_AMOUNT");
        public final static Property Card_type = new Property(31, String.class, "card_type", false, "CARD_TYPE");
        public final static Property Card_sequence = new Property(32, String.class, "card_sequence", false, "CARD_SEQUENCE");
        public final static Property ChipData = new Property(33, String.class, "ChipData", false, "CHIP_DATA");
        public final static Property TVRValue = new Property(34, String.class, "TVRValue", false, "TVRVALUE");
        public final static Property TSIValue = new Property(35, String.class, "TSIValue", false, "TSIVALUE");
        public final static Property TransCryto = new Property(36, String.class, "TransCryto", false, "TRANS_CRYTO");
        public final static Property TotalScript71 = new Property(37, String.class, "TotalScript71", false, "TOTAL_SCRIPT71");
        public final static Property TotalScript72 = new Property(38, String.class, "TotalScript72", false, "TOTAL_SCRIPT72");
        public final static Property ScriptRslt71 = new Property(39, String.class, "ScriptRslt71", false, "SCRIPT_RSLT71");
        public final static Property ScriptRslt72 = new Property(40, String.class, "ScriptRslt72", false, "SCRIPT_RSLT72");
        public final static Property ChAid = new Property(41, String.class, "chAid", false, "CH_AID");
        public final static Property Application_label = new Property(42, String.class, "application_label", false, "APPLICATION_LABEL");
        public final static Property Ui8ClsSchemeid = new Property(43, String.class, "ui8ClsSchemeid", false, "UI8_CLS_SCHEMEID");
        public final static Property Ui8SignReq = new Property(44, String.class, "ui8SignReq", false, "UI8_SIGN_REQ");
    }


    public BatchModelDao(DaoConfig config) {
        super(config);
    }
    
    public BatchModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BATCH_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BATCH__ID\" TEXT," + // 1: BATCH_ID
                "\"HDT_INDEX\" TEXT," + // 2: hdt_index
                "\"TRANS_TYPE\" TEXT," + // 3: trans_type
                "\"TRANS_MODE\" TEXT," + // 4: trans_mode
                "\"VOIDED\" TEXT," + // 5: voided
                "\"REVERSED\" TEXT," + // 6: reversed
                "\"UPLOADED\" TEXT," + // 7: uploaded
                "\"PROC_CODE\" TEXT," + // 8: proc_code
                "\"INVOICE_NUMBER\" TEXT," + // 9: invoice_number
                "\"AMOUNT\" TEXT," + // 10: amount
                "\"TIP_AMOUNT\" TEXT," + // 11: tip_amount
                "\"TIME\" TEXT," + // 12: time
                "\"DATE\" TEXT," + // 13: date
                "\"YEAR\" TEXT," + // 14: year
                "\"ORG_MESS_ID\" TEXT," + // 15: org_mess_id
                "\"SYS_TRACE_NUM\" TEXT," + // 16: sys_trace_num
                "\"DATE_EXP\" TEXT," + // 17: date_exp
                "\"RETR_REF_NUM\" TEXT," + // 18: retr_ref_num
                "\"AUTH_ID_RESP\" TEXT," + // 19: auth_id_resp
                "\"RESP_CODE\" TEXT," + // 20: resp_code
                "\"ACCT_NUMBER\" TEXT," + // 21: acct_number
                "\"PERSON_NAME\" TEXT," + // 22: person_name
                "\"ORIGINAL_AMOUNT\" TEXT," + // 23: original_amount
                "\"ADDITIONAL_DATA\" TEXT," + // 24: additional_data
                "\"PAYMENT_TERM_INFO\" TEXT," + // 25: payment_term_info
                "\"PRI_ACCT_NUM\" TEXT," + // 26: pri_acct_num
                "\"POS_ENT_MODE\" TEXT," + // 27: pos_ent_mode
                "\"NII\" TEXT," + // 28: NII
                "\"POS_COND_CODE\" TEXT," + // 29: pos_cond_code
                "\"ADD_AMOUNT\" TEXT," + // 30: add_amount
                "\"CARD_TYPE\" TEXT," + // 31: card_type
                "\"CARD_SEQUENCE\" TEXT," + // 32: card_sequence
                "\"CHIP_DATA\" TEXT," + // 33: ChipData
                "\"TVRVALUE\" TEXT," + // 34: TVRValue
                "\"TSIVALUE\" TEXT," + // 35: TSIValue
                "\"TRANS_CRYTO\" TEXT," + // 36: TransCryto
                "\"TOTAL_SCRIPT71\" TEXT," + // 37: TotalScript71
                "\"TOTAL_SCRIPT72\" TEXT," + // 38: TotalScript72
                "\"SCRIPT_RSLT71\" TEXT," + // 39: ScriptRslt71
                "\"SCRIPT_RSLT72\" TEXT," + // 40: ScriptRslt72
                "\"CH_AID\" TEXT," + // 41: chAid
                "\"APPLICATION_LABEL\" TEXT," + // 42: application_label
                "\"UI8_CLS_SCHEMEID\" TEXT," + // 43: ui8ClsSchemeid
                "\"UI8_SIGN_REQ\" TEXT);"); // 44: ui8SignReq
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BATCH_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BatchModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String BATCH_ID = entity.getBATCH_ID();
        if (BATCH_ID != null) {
            stmt.bindString(2, BATCH_ID);
        }
 
        String hdt_index = entity.getHdt_index();
        if (hdt_index != null) {
            stmt.bindString(3, hdt_index);
        }
 
        String trans_type = entity.getTrans_type();
        if (trans_type != null) {
            stmt.bindString(4, trans_type);
        }
 
        String trans_mode = entity.getTrans_mode();
        if (trans_mode != null) {
            stmt.bindString(5, trans_mode);
        }
 
        String voided = entity.getVoided();
        if (voided != null) {
            stmt.bindString(6, voided);
        }
 
        String reversed = entity.getReversed();
        if (reversed != null) {
            stmt.bindString(7, reversed);
        }
 
        String uploaded = entity.getUploaded();
        if (uploaded != null) {
            stmt.bindString(8, uploaded);
        }
 
        String proc_code = entity.getProc_code();
        if (proc_code != null) {
            stmt.bindString(9, proc_code);
        }
 
        String invoice_number = entity.getInvoice_number();
        if (invoice_number != null) {
            stmt.bindString(10, invoice_number);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(11, amount);
        }
 
        String tip_amount = entity.getTip_amount();
        if (tip_amount != null) {
            stmt.bindString(12, tip_amount);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(13, time);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(14, date);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(15, year);
        }
 
        String org_mess_id = entity.getOrg_mess_id();
        if (org_mess_id != null) {
            stmt.bindString(16, org_mess_id);
        }
 
        String sys_trace_num = entity.getSys_trace_num();
        if (sys_trace_num != null) {
            stmt.bindString(17, sys_trace_num);
        }
 
        String date_exp = entity.getDate_exp();
        if (date_exp != null) {
            stmt.bindString(18, date_exp);
        }
 
        String retr_ref_num = entity.getRetr_ref_num();
        if (retr_ref_num != null) {
            stmt.bindString(19, retr_ref_num);
        }
 
        String auth_id_resp = entity.getAuth_id_resp();
        if (auth_id_resp != null) {
            stmt.bindString(20, auth_id_resp);
        }
 
        String resp_code = entity.getResp_code();
        if (resp_code != null) {
            stmt.bindString(21, resp_code);
        }
 
        String acct_number = entity.getAcct_number();
        if (acct_number != null) {
            stmt.bindString(22, acct_number);
        }
 
        String person_name = entity.getPerson_name();
        if (person_name != null) {
            stmt.bindString(23, person_name);
        }
 
        String original_amount = entity.getOriginal_amount();
        if (original_amount != null) {
            stmt.bindString(24, original_amount);
        }
 
        String additional_data = entity.getAdditional_data();
        if (additional_data != null) {
            stmt.bindString(25, additional_data);
        }
 
        String payment_term_info = entity.getPayment_term_info();
        if (payment_term_info != null) {
            stmt.bindString(26, payment_term_info);
        }
 
        String pri_acct_num = entity.getPri_acct_num();
        if (pri_acct_num != null) {
            stmt.bindString(27, pri_acct_num);
        }
 
        String pos_ent_mode = entity.getPos_ent_mode();
        if (pos_ent_mode != null) {
            stmt.bindString(28, pos_ent_mode);
        }
 
        String NII = entity.getNII();
        if (NII != null) {
            stmt.bindString(29, NII);
        }
 
        String pos_cond_code = entity.getPos_cond_code();
        if (pos_cond_code != null) {
            stmt.bindString(30, pos_cond_code);
        }
 
        String add_amount = entity.getAdd_amount();
        if (add_amount != null) {
            stmt.bindString(31, add_amount);
        }
 
        String card_type = entity.getCard_type();
        if (card_type != null) {
            stmt.bindString(32, card_type);
        }
 
        String card_sequence = entity.getCard_sequence();
        if (card_sequence != null) {
            stmt.bindString(33, card_sequence);
        }
 
        String ChipData = entity.getChipData();
        if (ChipData != null) {
            stmt.bindString(34, ChipData);
        }
 
        String TVRValue = entity.getTVRValue();
        if (TVRValue != null) {
            stmt.bindString(35, TVRValue);
        }
 
        String TSIValue = entity.getTSIValue();
        if (TSIValue != null) {
            stmt.bindString(36, TSIValue);
        }
 
        String TransCryto = entity.getTransCryto();
        if (TransCryto != null) {
            stmt.bindString(37, TransCryto);
        }
 
        String TotalScript71 = entity.getTotalScript71();
        if (TotalScript71 != null) {
            stmt.bindString(38, TotalScript71);
        }
 
        String TotalScript72 = entity.getTotalScript72();
        if (TotalScript72 != null) {
            stmt.bindString(39, TotalScript72);
        }
 
        String ScriptRslt71 = entity.getScriptRslt71();
        if (ScriptRslt71 != null) {
            stmt.bindString(40, ScriptRslt71);
        }
 
        String ScriptRslt72 = entity.getScriptRslt72();
        if (ScriptRslt72 != null) {
            stmt.bindString(41, ScriptRslt72);
        }
 
        String chAid = entity.getChAid();
        if (chAid != null) {
            stmt.bindString(42, chAid);
        }
 
        String application_label = entity.getApplication_label();
        if (application_label != null) {
            stmt.bindString(43, application_label);
        }
 
        String ui8ClsSchemeid = entity.getUi8ClsSchemeid();
        if (ui8ClsSchemeid != null) {
            stmt.bindString(44, ui8ClsSchemeid);
        }
 
        String ui8SignReq = entity.getUi8SignReq();
        if (ui8SignReq != null) {
            stmt.bindString(45, ui8SignReq);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BatchModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String BATCH_ID = entity.getBATCH_ID();
        if (BATCH_ID != null) {
            stmt.bindString(2, BATCH_ID);
        }
 
        String hdt_index = entity.getHdt_index();
        if (hdt_index != null) {
            stmt.bindString(3, hdt_index);
        }
 
        String trans_type = entity.getTrans_type();
        if (trans_type != null) {
            stmt.bindString(4, trans_type);
        }
 
        String trans_mode = entity.getTrans_mode();
        if (trans_mode != null) {
            stmt.bindString(5, trans_mode);
        }
 
        String voided = entity.getVoided();
        if (voided != null) {
            stmt.bindString(6, voided);
        }
 
        String reversed = entity.getReversed();
        if (reversed != null) {
            stmt.bindString(7, reversed);
        }
 
        String uploaded = entity.getUploaded();
        if (uploaded != null) {
            stmt.bindString(8, uploaded);
        }
 
        String proc_code = entity.getProc_code();
        if (proc_code != null) {
            stmt.bindString(9, proc_code);
        }
 
        String invoice_number = entity.getInvoice_number();
        if (invoice_number != null) {
            stmt.bindString(10, invoice_number);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(11, amount);
        }
 
        String tip_amount = entity.getTip_amount();
        if (tip_amount != null) {
            stmt.bindString(12, tip_amount);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(13, time);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(14, date);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(15, year);
        }
 
        String org_mess_id = entity.getOrg_mess_id();
        if (org_mess_id != null) {
            stmt.bindString(16, org_mess_id);
        }
 
        String sys_trace_num = entity.getSys_trace_num();
        if (sys_trace_num != null) {
            stmt.bindString(17, sys_trace_num);
        }
 
        String date_exp = entity.getDate_exp();
        if (date_exp != null) {
            stmt.bindString(18, date_exp);
        }
 
        String retr_ref_num = entity.getRetr_ref_num();
        if (retr_ref_num != null) {
            stmt.bindString(19, retr_ref_num);
        }
 
        String auth_id_resp = entity.getAuth_id_resp();
        if (auth_id_resp != null) {
            stmt.bindString(20, auth_id_resp);
        }
 
        String resp_code = entity.getResp_code();
        if (resp_code != null) {
            stmt.bindString(21, resp_code);
        }
 
        String acct_number = entity.getAcct_number();
        if (acct_number != null) {
            stmt.bindString(22, acct_number);
        }
 
        String person_name = entity.getPerson_name();
        if (person_name != null) {
            stmt.bindString(23, person_name);
        }
 
        String original_amount = entity.getOriginal_amount();
        if (original_amount != null) {
            stmt.bindString(24, original_amount);
        }
 
        String additional_data = entity.getAdditional_data();
        if (additional_data != null) {
            stmt.bindString(25, additional_data);
        }
 
        String payment_term_info = entity.getPayment_term_info();
        if (payment_term_info != null) {
            stmt.bindString(26, payment_term_info);
        }
 
        String pri_acct_num = entity.getPri_acct_num();
        if (pri_acct_num != null) {
            stmt.bindString(27, pri_acct_num);
        }
 
        String pos_ent_mode = entity.getPos_ent_mode();
        if (pos_ent_mode != null) {
            stmt.bindString(28, pos_ent_mode);
        }
 
        String NII = entity.getNII();
        if (NII != null) {
            stmt.bindString(29, NII);
        }
 
        String pos_cond_code = entity.getPos_cond_code();
        if (pos_cond_code != null) {
            stmt.bindString(30, pos_cond_code);
        }
 
        String add_amount = entity.getAdd_amount();
        if (add_amount != null) {
            stmt.bindString(31, add_amount);
        }
 
        String card_type = entity.getCard_type();
        if (card_type != null) {
            stmt.bindString(32, card_type);
        }
 
        String card_sequence = entity.getCard_sequence();
        if (card_sequence != null) {
            stmt.bindString(33, card_sequence);
        }
 
        String ChipData = entity.getChipData();
        if (ChipData != null) {
            stmt.bindString(34, ChipData);
        }
 
        String TVRValue = entity.getTVRValue();
        if (TVRValue != null) {
            stmt.bindString(35, TVRValue);
        }
 
        String TSIValue = entity.getTSIValue();
        if (TSIValue != null) {
            stmt.bindString(36, TSIValue);
        }
 
        String TransCryto = entity.getTransCryto();
        if (TransCryto != null) {
            stmt.bindString(37, TransCryto);
        }
 
        String TotalScript71 = entity.getTotalScript71();
        if (TotalScript71 != null) {
            stmt.bindString(38, TotalScript71);
        }
 
        String TotalScript72 = entity.getTotalScript72();
        if (TotalScript72 != null) {
            stmt.bindString(39, TotalScript72);
        }
 
        String ScriptRslt71 = entity.getScriptRslt71();
        if (ScriptRslt71 != null) {
            stmt.bindString(40, ScriptRslt71);
        }
 
        String ScriptRslt72 = entity.getScriptRslt72();
        if (ScriptRslt72 != null) {
            stmt.bindString(41, ScriptRslt72);
        }
 
        String chAid = entity.getChAid();
        if (chAid != null) {
            stmt.bindString(42, chAid);
        }
 
        String application_label = entity.getApplication_label();
        if (application_label != null) {
            stmt.bindString(43, application_label);
        }
 
        String ui8ClsSchemeid = entity.getUi8ClsSchemeid();
        if (ui8ClsSchemeid != null) {
            stmt.bindString(44, ui8ClsSchemeid);
        }
 
        String ui8SignReq = entity.getUi8SignReq();
        if (ui8SignReq != null) {
            stmt.bindString(45, ui8SignReq);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BatchModel readEntity(Cursor cursor, int offset) {
        BatchModel entity = new BatchModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BATCH_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hdt_index
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // trans_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // trans_mode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // voided
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // reversed
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uploaded
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // proc_code
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // invoice_number
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // amount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tip_amount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // time
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // date
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // year
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // org_mess_id
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // sys_trace_num
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // date_exp
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // retr_ref_num
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // auth_id_resp
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // resp_code
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // acct_number
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // person_name
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // original_amount
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // additional_data
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // payment_term_info
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // pri_acct_num
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // pos_ent_mode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // NII
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // pos_cond_code
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // add_amount
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // card_type
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // card_sequence
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // ChipData
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // TVRValue
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // TSIValue
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // TransCryto
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // TotalScript71
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // TotalScript72
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // ScriptRslt71
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // ScriptRslt72
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // chAid
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // application_label
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // ui8ClsSchemeid
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44) // ui8SignReq
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BatchModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBATCH_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHdt_index(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTrans_type(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTrans_mode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVoided(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReversed(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUploaded(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProc_code(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInvoice_number(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAmount(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTip_amount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setYear(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOrg_mess_id(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSys_trace_num(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDate_exp(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRetr_ref_num(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAuth_id_resp(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setResp_code(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAcct_number(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPerson_name(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOriginal_amount(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAdditional_data(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPayment_term_info(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPri_acct_num(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPos_ent_mode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setNII(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setPos_cond_code(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setAdd_amount(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCard_type(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCard_sequence(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setChipData(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setTVRValue(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setTSIValue(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setTransCryto(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setTotalScript71(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setTotalScript72(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setScriptRslt71(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setScriptRslt72(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setChAid(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setApplication_label(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setUi8ClsSchemeid(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setUi8SignReq(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BatchModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BatchModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BatchModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
