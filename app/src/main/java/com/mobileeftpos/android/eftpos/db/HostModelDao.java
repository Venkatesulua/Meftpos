package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOST_MODEL".
*/
public class HostModelDao extends AbstractDao<HostModel, Long> {

    public static final String TABLENAME = "HOST_MODEL";

    /**
     * Properties of entity HostModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HDT_HOST_ID = new Property(1, String.class, "HDT_HOST_ID", false, "HDT__HOST__ID");
        public final static Property HDT_HOST_ENABLED = new Property(2, String.class, "HDT_HOST_ENABLED", false, "HDT__HOST__ENABLED");
        public final static Property HDT_COM_INDEX = new Property(3, String.class, "HDT_COM_INDEX", false, "HDT__COM__INDEX");
        public final static Property HDT_REFERRAL_NUMBER = new Property(4, String.class, "HDT_REFERRAL_NUMBER", false, "HDT__REFERRAL__NUMBER");
        public final static Property HDT_TERMINAL_ID = new Property(5, String.class, "HDT_TERMINAL_ID", false, "HDT__TERMINAL__ID");
        public final static Property HDT_MERCHANT_ID = new Property(6, String.class, "HDT_MERCHANT_ID", false, "HDT__MERCHANT__ID");
        public final static Property HDT_TPDU = new Property(7, String.class, "HDT_TPDU", false, "HDT__TPDU");
        public final static Property HDT_BATCH_NUMBER = new Property(8, String.class, "HDT_BATCH_NUMBER", false, "HDT__BATCH__NUMBER");
        public final static Property HDT_INVOICE_NUMBER = new Property(9, String.class, "HDT_INVOICE_NUMBER", false, "HDT__INVOICE__NUMBER");
        public final static Property HDT_PROCESSING_CODE = new Property(10, String.class, "HDT_PROCESSING_CODE", false, "HDT__PROCESSING__CODE");
        public final static Property HDT_HOST_TYPE = new Property(11, String.class, "HDT_HOST_TYPE", false, "HDT__HOST__TYPE");
        public final static Property HDT_HOST_LABEL = new Property(12, String.class, "HDT_HOST_LABEL", false, "HDT__HOST__LABEL");
        public final static Property HDT_MANUAL_ENTRY_FLAG = new Property(13, String.class, "HDT_MANUAL_ENTRY_FLAG", false, "HDT__MANUAL__ENTRY__FLAG");
        public final static Property HDT_REVERSAL_FLAG = new Property(14, String.class, "HDT_REVERSAL_FLAG", false, "HDT__REVERSAL__FLAG");
        public final static Property HDT_SETTLEMENT_FLAG = new Property(15, String.class, "HDT_SETTLEMENT_FLAG", false, "HDT__SETTLEMENT__FLAG");
        public final static Property HDT_BATCH_MAX_TOTAL = new Property(16, String.class, "HDT_BATCH_MAX_TOTAL", false, "HDT__BATCH__MAX__TOTAL");
        public final static Property HDT_BATCH_STL_LAST = new Property(17, String.class, "HDT_BATCH_STL_LAST", false, "HDT__BATCH__STL__LAST");
        public final static Property HDT_BATCH_CURR_TOTAL = new Property(18, String.class, "HDT_BATCH_CURR_TOTAL", false, "HDT__BATCH__CURR__TOTAL");
        public final static Property HDT_BATCH_NO_TRANS = new Property(19, String.class, "HDT_BATCH_NO_TRANS", false, "HDT__BATCH__NO__TRANS");
        public final static Property HDT_DESCRIPTION = new Property(20, String.class, "HDT_DESCRIPTION", false, "HDT__DESCRIPTION");
        public final static Property HDT_PAY_TERM = new Property(21, String.class, "HDT_PAY_TERM", false, "HDT__PAY__TERM");
        public final static Property HDT_PEK = new Property(22, String.class, "HDT_PEK", false, "HDT__PEK");
        public final static Property HDT_MEK = new Property(23, String.class, "HDT_MEK", false, "HDT__MEK");
        public final static Property HDT_MAC_INDEX = new Property(24, String.class, "HDT_MAC_INDEX", false, "HDT__MAC__INDEX");
        public final static Property HDT_CUSTOM_OPTIONS = new Property(25, String.class, "HDT_CUSTOM_OPTIONS", false, "HDT__CUSTOM__OPTIONS");
        public final static Property HDT_CURR_INDEX = new Property(26, String.class, "HDT_CURR_INDEX", false, "HDT__CURR__INDEX");
        public final static Property HDT_PIGGYBACK_FLAG = new Property(27, String.class, "HDT_PIGGYBACK_FLAG", false, "HDT__PIGGYBACK__FLAG");
        public final static Property HDT_MINIMUM_AMT = new Property(28, String.class, "HDT_MINIMUM_AMT", false, "HDT__MINIMUM__AMT");
        public final static Property HDT_RATE = new Property(29, String.class, "HDT_RATE", false, "HDT__RATE");
        public final static Property HDT_REDIRECT_IF_DISABLE = new Property(30, String.class, "HDT_REDIRECT_IF_DISABLE", false, "HDT__REDIRECT__IF__DISABLE");
        public final static Property HDT_REVERSAL_COUNT = new Property(31, String.class, "HDT_REVERSAL_COUNT", false, "HDT__REVERSAL__COUNT");
        public final static Property HDT_SIGCAP_INDEX = new Property(32, String.class, "HDT_SIGCAP_INDEX", false, "HDT__SIGCAP__INDEX");
        public final static Property HDT_BATCH_GROUP_NUMBER = new Property(33, String.class, "HDT_BATCH_GROUP_NUMBER", false, "HDT__BATCH__GROUP__NUMBER");
    }


    public HostModelDao(DaoConfig config) {
        super(config);
    }
    
    public HostModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOST_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HDT__HOST__ID\" TEXT," + // 1: HDT_HOST_ID
                "\"HDT__HOST__ENABLED\" TEXT," + // 2: HDT_HOST_ENABLED
                "\"HDT__COM__INDEX\" TEXT," + // 3: HDT_COM_INDEX
                "\"HDT__REFERRAL__NUMBER\" TEXT," + // 4: HDT_REFERRAL_NUMBER
                "\"HDT__TERMINAL__ID\" TEXT," + // 5: HDT_TERMINAL_ID
                "\"HDT__MERCHANT__ID\" TEXT," + // 6: HDT_MERCHANT_ID
                "\"HDT__TPDU\" TEXT," + // 7: HDT_TPDU
                "\"HDT__BATCH__NUMBER\" TEXT," + // 8: HDT_BATCH_NUMBER
                "\"HDT__INVOICE__NUMBER\" TEXT," + // 9: HDT_INVOICE_NUMBER
                "\"HDT__PROCESSING__CODE\" TEXT," + // 10: HDT_PROCESSING_CODE
                "\"HDT__HOST__TYPE\" TEXT," + // 11: HDT_HOST_TYPE
                "\"HDT__HOST__LABEL\" TEXT," + // 12: HDT_HOST_LABEL
                "\"HDT__MANUAL__ENTRY__FLAG\" TEXT," + // 13: HDT_MANUAL_ENTRY_FLAG
                "\"HDT__REVERSAL__FLAG\" TEXT," + // 14: HDT_REVERSAL_FLAG
                "\"HDT__SETTLEMENT__FLAG\" TEXT," + // 15: HDT_SETTLEMENT_FLAG
                "\"HDT__BATCH__MAX__TOTAL\" TEXT," + // 16: HDT_BATCH_MAX_TOTAL
                "\"HDT__BATCH__STL__LAST\" TEXT," + // 17: HDT_BATCH_STL_LAST
                "\"HDT__BATCH__CURR__TOTAL\" TEXT," + // 18: HDT_BATCH_CURR_TOTAL
                "\"HDT__BATCH__NO__TRANS\" TEXT," + // 19: HDT_BATCH_NO_TRANS
                "\"HDT__DESCRIPTION\" TEXT," + // 20: HDT_DESCRIPTION
                "\"HDT__PAY__TERM\" TEXT," + // 21: HDT_PAY_TERM
                "\"HDT__PEK\" TEXT," + // 22: HDT_PEK
                "\"HDT__MEK\" TEXT," + // 23: HDT_MEK
                "\"HDT__MAC__INDEX\" TEXT," + // 24: HDT_MAC_INDEX
                "\"HDT__CUSTOM__OPTIONS\" TEXT," + // 25: HDT_CUSTOM_OPTIONS
                "\"HDT__CURR__INDEX\" TEXT," + // 26: HDT_CURR_INDEX
                "\"HDT__PIGGYBACK__FLAG\" TEXT," + // 27: HDT_PIGGYBACK_FLAG
                "\"HDT__MINIMUM__AMT\" TEXT," + // 28: HDT_MINIMUM_AMT
                "\"HDT__RATE\" TEXT," + // 29: HDT_RATE
                "\"HDT__REDIRECT__IF__DISABLE\" TEXT," + // 30: HDT_REDIRECT_IF_DISABLE
                "\"HDT__REVERSAL__COUNT\" TEXT," + // 31: HDT_REVERSAL_COUNT
                "\"HDT__SIGCAP__INDEX\" TEXT," + // 32: HDT_SIGCAP_INDEX
                "\"HDT__BATCH__GROUP__NUMBER\" TEXT);"); // 33: HDT_BATCH_GROUP_NUMBER
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOST_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HostModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String HDT_HOST_ID = entity.getHDT_HOST_ID();
        if (HDT_HOST_ID != null) {
            stmt.bindString(2, HDT_HOST_ID);
        }
 
        String HDT_HOST_ENABLED = entity.getHDT_HOST_ENABLED();
        if (HDT_HOST_ENABLED != null) {
            stmt.bindString(3, HDT_HOST_ENABLED);
        }
 
        String HDT_COM_INDEX = entity.getHDT_COM_INDEX();
        if (HDT_COM_INDEX != null) {
            stmt.bindString(4, HDT_COM_INDEX);
        }
 
        String HDT_REFERRAL_NUMBER = entity.getHDT_REFERRAL_NUMBER();
        if (HDT_REFERRAL_NUMBER != null) {
            stmt.bindString(5, HDT_REFERRAL_NUMBER);
        }
 
        String HDT_TERMINAL_ID = entity.getHDT_TERMINAL_ID();
        if (HDT_TERMINAL_ID != null) {
            stmt.bindString(6, HDT_TERMINAL_ID);
        }
 
        String HDT_MERCHANT_ID = entity.getHDT_MERCHANT_ID();
        if (HDT_MERCHANT_ID != null) {
            stmt.bindString(7, HDT_MERCHANT_ID);
        }
 
        String HDT_TPDU = entity.getHDT_TPDU();
        if (HDT_TPDU != null) {
            stmt.bindString(8, HDT_TPDU);
        }
 
        String HDT_BATCH_NUMBER = entity.getHDT_BATCH_NUMBER();
        if (HDT_BATCH_NUMBER != null) {
            stmt.bindString(9, HDT_BATCH_NUMBER);
        }
 
        String HDT_INVOICE_NUMBER = entity.getHDT_INVOICE_NUMBER();
        if (HDT_INVOICE_NUMBER != null) {
            stmt.bindString(10, HDT_INVOICE_NUMBER);
        }
 
        String HDT_PROCESSING_CODE = entity.getHDT_PROCESSING_CODE();
        if (HDT_PROCESSING_CODE != null) {
            stmt.bindString(11, HDT_PROCESSING_CODE);
        }
 
        String HDT_HOST_TYPE = entity.getHDT_HOST_TYPE();
        if (HDT_HOST_TYPE != null) {
            stmt.bindString(12, HDT_HOST_TYPE);
        }
 
        String HDT_HOST_LABEL = entity.getHDT_HOST_LABEL();
        if (HDT_HOST_LABEL != null) {
            stmt.bindString(13, HDT_HOST_LABEL);
        }
 
        String HDT_MANUAL_ENTRY_FLAG = entity.getHDT_MANUAL_ENTRY_FLAG();
        if (HDT_MANUAL_ENTRY_FLAG != null) {
            stmt.bindString(14, HDT_MANUAL_ENTRY_FLAG);
        }
 
        String HDT_REVERSAL_FLAG = entity.getHDT_REVERSAL_FLAG();
        if (HDT_REVERSAL_FLAG != null) {
            stmt.bindString(15, HDT_REVERSAL_FLAG);
        }
 
        String HDT_SETTLEMENT_FLAG = entity.getHDT_SETTLEMENT_FLAG();
        if (HDT_SETTLEMENT_FLAG != null) {
            stmt.bindString(16, HDT_SETTLEMENT_FLAG);
        }
 
        String HDT_BATCH_MAX_TOTAL = entity.getHDT_BATCH_MAX_TOTAL();
        if (HDT_BATCH_MAX_TOTAL != null) {
            stmt.bindString(17, HDT_BATCH_MAX_TOTAL);
        }
 
        String HDT_BATCH_STL_LAST = entity.getHDT_BATCH_STL_LAST();
        if (HDT_BATCH_STL_LAST != null) {
            stmt.bindString(18, HDT_BATCH_STL_LAST);
        }
 
        String HDT_BATCH_CURR_TOTAL = entity.getHDT_BATCH_CURR_TOTAL();
        if (HDT_BATCH_CURR_TOTAL != null) {
            stmt.bindString(19, HDT_BATCH_CURR_TOTAL);
        }
 
        String HDT_BATCH_NO_TRANS = entity.getHDT_BATCH_NO_TRANS();
        if (HDT_BATCH_NO_TRANS != null) {
            stmt.bindString(20, HDT_BATCH_NO_TRANS);
        }
 
        String HDT_DESCRIPTION = entity.getHDT_DESCRIPTION();
        if (HDT_DESCRIPTION != null) {
            stmt.bindString(21, HDT_DESCRIPTION);
        }
 
        String HDT_PAY_TERM = entity.getHDT_PAY_TERM();
        if (HDT_PAY_TERM != null) {
            stmt.bindString(22, HDT_PAY_TERM);
        }
 
        String HDT_PEK = entity.getHDT_PEK();
        if (HDT_PEK != null) {
            stmt.bindString(23, HDT_PEK);
        }
 
        String HDT_MEK = entity.getHDT_MEK();
        if (HDT_MEK != null) {
            stmt.bindString(24, HDT_MEK);
        }
 
        String HDT_MAC_INDEX = entity.getHDT_MAC_INDEX();
        if (HDT_MAC_INDEX != null) {
            stmt.bindString(25, HDT_MAC_INDEX);
        }
 
        String HDT_CUSTOM_OPTIONS = entity.getHDT_CUSTOM_OPTIONS();
        if (HDT_CUSTOM_OPTIONS != null) {
            stmt.bindString(26, HDT_CUSTOM_OPTIONS);
        }
 
        String HDT_CURR_INDEX = entity.getHDT_CURR_INDEX();
        if (HDT_CURR_INDEX != null) {
            stmt.bindString(27, HDT_CURR_INDEX);
        }
 
        String HDT_PIGGYBACK_FLAG = entity.getHDT_PIGGYBACK_FLAG();
        if (HDT_PIGGYBACK_FLAG != null) {
            stmt.bindString(28, HDT_PIGGYBACK_FLAG);
        }
 
        String HDT_MINIMUM_AMT = entity.getHDT_MINIMUM_AMT();
        if (HDT_MINIMUM_AMT != null) {
            stmt.bindString(29, HDT_MINIMUM_AMT);
        }
 
        String HDT_RATE = entity.getHDT_RATE();
        if (HDT_RATE != null) {
            stmt.bindString(30, HDT_RATE);
        }
 
        String HDT_REDIRECT_IF_DISABLE = entity.getHDT_REDIRECT_IF_DISABLE();
        if (HDT_REDIRECT_IF_DISABLE != null) {
            stmt.bindString(31, HDT_REDIRECT_IF_DISABLE);
        }
 
        String HDT_REVERSAL_COUNT = entity.getHDT_REVERSAL_COUNT();
        if (HDT_REVERSAL_COUNT != null) {
            stmt.bindString(32, HDT_REVERSAL_COUNT);
        }
 
        String HDT_SIGCAP_INDEX = entity.getHDT_SIGCAP_INDEX();
        if (HDT_SIGCAP_INDEX != null) {
            stmt.bindString(33, HDT_SIGCAP_INDEX);
        }
 
        String HDT_BATCH_GROUP_NUMBER = entity.getHDT_BATCH_GROUP_NUMBER();
        if (HDT_BATCH_GROUP_NUMBER != null) {
            stmt.bindString(34, HDT_BATCH_GROUP_NUMBER);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HostModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String HDT_HOST_ID = entity.getHDT_HOST_ID();
        if (HDT_HOST_ID != null) {
            stmt.bindString(2, HDT_HOST_ID);
        }
 
        String HDT_HOST_ENABLED = entity.getHDT_HOST_ENABLED();
        if (HDT_HOST_ENABLED != null) {
            stmt.bindString(3, HDT_HOST_ENABLED);
        }
 
        String HDT_COM_INDEX = entity.getHDT_COM_INDEX();
        if (HDT_COM_INDEX != null) {
            stmt.bindString(4, HDT_COM_INDEX);
        }
 
        String HDT_REFERRAL_NUMBER = entity.getHDT_REFERRAL_NUMBER();
        if (HDT_REFERRAL_NUMBER != null) {
            stmt.bindString(5, HDT_REFERRAL_NUMBER);
        }
 
        String HDT_TERMINAL_ID = entity.getHDT_TERMINAL_ID();
        if (HDT_TERMINAL_ID != null) {
            stmt.bindString(6, HDT_TERMINAL_ID);
        }
 
        String HDT_MERCHANT_ID = entity.getHDT_MERCHANT_ID();
        if (HDT_MERCHANT_ID != null) {
            stmt.bindString(7, HDT_MERCHANT_ID);
        }
 
        String HDT_TPDU = entity.getHDT_TPDU();
        if (HDT_TPDU != null) {
            stmt.bindString(8, HDT_TPDU);
        }
 
        String HDT_BATCH_NUMBER = entity.getHDT_BATCH_NUMBER();
        if (HDT_BATCH_NUMBER != null) {
            stmt.bindString(9, HDT_BATCH_NUMBER);
        }
 
        String HDT_INVOICE_NUMBER = entity.getHDT_INVOICE_NUMBER();
        if (HDT_INVOICE_NUMBER != null) {
            stmt.bindString(10, HDT_INVOICE_NUMBER);
        }
 
        String HDT_PROCESSING_CODE = entity.getHDT_PROCESSING_CODE();
        if (HDT_PROCESSING_CODE != null) {
            stmt.bindString(11, HDT_PROCESSING_CODE);
        }
 
        String HDT_HOST_TYPE = entity.getHDT_HOST_TYPE();
        if (HDT_HOST_TYPE != null) {
            stmt.bindString(12, HDT_HOST_TYPE);
        }
 
        String HDT_HOST_LABEL = entity.getHDT_HOST_LABEL();
        if (HDT_HOST_LABEL != null) {
            stmt.bindString(13, HDT_HOST_LABEL);
        }
 
        String HDT_MANUAL_ENTRY_FLAG = entity.getHDT_MANUAL_ENTRY_FLAG();
        if (HDT_MANUAL_ENTRY_FLAG != null) {
            stmt.bindString(14, HDT_MANUAL_ENTRY_FLAG);
        }
 
        String HDT_REVERSAL_FLAG = entity.getHDT_REVERSAL_FLAG();
        if (HDT_REVERSAL_FLAG != null) {
            stmt.bindString(15, HDT_REVERSAL_FLAG);
        }
 
        String HDT_SETTLEMENT_FLAG = entity.getHDT_SETTLEMENT_FLAG();
        if (HDT_SETTLEMENT_FLAG != null) {
            stmt.bindString(16, HDT_SETTLEMENT_FLAG);
        }
 
        String HDT_BATCH_MAX_TOTAL = entity.getHDT_BATCH_MAX_TOTAL();
        if (HDT_BATCH_MAX_TOTAL != null) {
            stmt.bindString(17, HDT_BATCH_MAX_TOTAL);
        }
 
        String HDT_BATCH_STL_LAST = entity.getHDT_BATCH_STL_LAST();
        if (HDT_BATCH_STL_LAST != null) {
            stmt.bindString(18, HDT_BATCH_STL_LAST);
        }
 
        String HDT_BATCH_CURR_TOTAL = entity.getHDT_BATCH_CURR_TOTAL();
        if (HDT_BATCH_CURR_TOTAL != null) {
            stmt.bindString(19, HDT_BATCH_CURR_TOTAL);
        }
 
        String HDT_BATCH_NO_TRANS = entity.getHDT_BATCH_NO_TRANS();
        if (HDT_BATCH_NO_TRANS != null) {
            stmt.bindString(20, HDT_BATCH_NO_TRANS);
        }
 
        String HDT_DESCRIPTION = entity.getHDT_DESCRIPTION();
        if (HDT_DESCRIPTION != null) {
            stmt.bindString(21, HDT_DESCRIPTION);
        }
 
        String HDT_PAY_TERM = entity.getHDT_PAY_TERM();
        if (HDT_PAY_TERM != null) {
            stmt.bindString(22, HDT_PAY_TERM);
        }
 
        String HDT_PEK = entity.getHDT_PEK();
        if (HDT_PEK != null) {
            stmt.bindString(23, HDT_PEK);
        }
 
        String HDT_MEK = entity.getHDT_MEK();
        if (HDT_MEK != null) {
            stmt.bindString(24, HDT_MEK);
        }
 
        String HDT_MAC_INDEX = entity.getHDT_MAC_INDEX();
        if (HDT_MAC_INDEX != null) {
            stmt.bindString(25, HDT_MAC_INDEX);
        }
 
        String HDT_CUSTOM_OPTIONS = entity.getHDT_CUSTOM_OPTIONS();
        if (HDT_CUSTOM_OPTIONS != null) {
            stmt.bindString(26, HDT_CUSTOM_OPTIONS);
        }
 
        String HDT_CURR_INDEX = entity.getHDT_CURR_INDEX();
        if (HDT_CURR_INDEX != null) {
            stmt.bindString(27, HDT_CURR_INDEX);
        }
 
        String HDT_PIGGYBACK_FLAG = entity.getHDT_PIGGYBACK_FLAG();
        if (HDT_PIGGYBACK_FLAG != null) {
            stmt.bindString(28, HDT_PIGGYBACK_FLAG);
        }
 
        String HDT_MINIMUM_AMT = entity.getHDT_MINIMUM_AMT();
        if (HDT_MINIMUM_AMT != null) {
            stmt.bindString(29, HDT_MINIMUM_AMT);
        }
 
        String HDT_RATE = entity.getHDT_RATE();
        if (HDT_RATE != null) {
            stmt.bindString(30, HDT_RATE);
        }
 
        String HDT_REDIRECT_IF_DISABLE = entity.getHDT_REDIRECT_IF_DISABLE();
        if (HDT_REDIRECT_IF_DISABLE != null) {
            stmt.bindString(31, HDT_REDIRECT_IF_DISABLE);
        }
 
        String HDT_REVERSAL_COUNT = entity.getHDT_REVERSAL_COUNT();
        if (HDT_REVERSAL_COUNT != null) {
            stmt.bindString(32, HDT_REVERSAL_COUNT);
        }
 
        String HDT_SIGCAP_INDEX = entity.getHDT_SIGCAP_INDEX();
        if (HDT_SIGCAP_INDEX != null) {
            stmt.bindString(33, HDT_SIGCAP_INDEX);
        }
 
        String HDT_BATCH_GROUP_NUMBER = entity.getHDT_BATCH_GROUP_NUMBER();
        if (HDT_BATCH_GROUP_NUMBER != null) {
            stmt.bindString(34, HDT_BATCH_GROUP_NUMBER);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HostModel readEntity(Cursor cursor, int offset) {
        HostModel entity = new HostModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // HDT_HOST_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // HDT_HOST_ENABLED
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // HDT_COM_INDEX
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // HDT_REFERRAL_NUMBER
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // HDT_TERMINAL_ID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // HDT_MERCHANT_ID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // HDT_TPDU
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // HDT_BATCH_NUMBER
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // HDT_INVOICE_NUMBER
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // HDT_PROCESSING_CODE
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // HDT_HOST_TYPE
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // HDT_HOST_LABEL
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // HDT_MANUAL_ENTRY_FLAG
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // HDT_REVERSAL_FLAG
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // HDT_SETTLEMENT_FLAG
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // HDT_BATCH_MAX_TOTAL
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // HDT_BATCH_STL_LAST
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // HDT_BATCH_CURR_TOTAL
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // HDT_BATCH_NO_TRANS
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // HDT_DESCRIPTION
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // HDT_PAY_TERM
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // HDT_PEK
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // HDT_MEK
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // HDT_MAC_INDEX
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // HDT_CUSTOM_OPTIONS
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // HDT_CURR_INDEX
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // HDT_PIGGYBACK_FLAG
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // HDT_MINIMUM_AMT
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // HDT_RATE
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // HDT_REDIRECT_IF_DISABLE
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // HDT_REVERSAL_COUNT
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // HDT_SIGCAP_INDEX
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // HDT_BATCH_GROUP_NUMBER
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HostModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHDT_HOST_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHDT_HOST_ENABLED(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHDT_COM_INDEX(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHDT_REFERRAL_NUMBER(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHDT_TERMINAL_ID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHDT_MERCHANT_ID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHDT_TPDU(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHDT_BATCH_NUMBER(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHDT_INVOICE_NUMBER(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHDT_PROCESSING_CODE(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHDT_HOST_TYPE(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setHDT_HOST_LABEL(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHDT_MANUAL_ENTRY_FLAG(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHDT_REVERSAL_FLAG(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHDT_SETTLEMENT_FLAG(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHDT_BATCH_MAX_TOTAL(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHDT_BATCH_STL_LAST(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setHDT_BATCH_CURR_TOTAL(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHDT_BATCH_NO_TRANS(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setHDT_DESCRIPTION(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setHDT_PAY_TERM(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setHDT_PEK(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setHDT_MEK(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setHDT_MAC_INDEX(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setHDT_CUSTOM_OPTIONS(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setHDT_CURR_INDEX(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setHDT_PIGGYBACK_FLAG(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setHDT_MINIMUM_AMT(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setHDT_RATE(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setHDT_REDIRECT_IF_DISABLE(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setHDT_REVERSAL_COUNT(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setHDT_SIGCAP_INDEX(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setHDT_BATCH_GROUP_NUMBER(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HostModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HostModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HostModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
