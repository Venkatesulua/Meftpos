package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MASKING_MODEL".
*/
public class MaskingModelDao extends AbstractDao<MaskingModel, Long> {

    public static final String TABLENAME = "MASKING_MODEL";

    /**
     * Properties of entity MaskingModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MASKING_ID = new Property(1, String.class, "MASKING_ID", false, "MASKING__ID");
        public final static Property DR_PAN_UNMASK = new Property(2, String.class, "DR_PAN_UNMASK", false, "DR__PAN__UNMASK");
        public final static Property DR_EXP_UNMASK = new Property(3, String.class, "DR_EXP_UNMASK", false, "DR__EXP__UNMASK");
        public final static Property DISPLAY_UNMASK = new Property(4, String.class, "DISPLAY_UNMASK", false, "DISPLAY__UNMASK");
    }


    public MaskingModelDao(DaoConfig config) {
        super(config);
    }
    
    public MaskingModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MASKING_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MASKING__ID\" TEXT," + // 1: MASKING_ID
                "\"DR__PAN__UNMASK\" TEXT," + // 2: DR_PAN_UNMASK
                "\"DR__EXP__UNMASK\" TEXT," + // 3: DR_EXP_UNMASK
                "\"DISPLAY__UNMASK\" TEXT);"); // 4: DISPLAY_UNMASK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MASKING_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaskingModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MASKING_ID = entity.getMASKING_ID();
        if (MASKING_ID != null) {
            stmt.bindString(2, MASKING_ID);
        }
 
        String DR_PAN_UNMASK = entity.getDR_PAN_UNMASK();
        if (DR_PAN_UNMASK != null) {
            stmt.bindString(3, DR_PAN_UNMASK);
        }
 
        String DR_EXP_UNMASK = entity.getDR_EXP_UNMASK();
        if (DR_EXP_UNMASK != null) {
            stmt.bindString(4, DR_EXP_UNMASK);
        }
 
        String DISPLAY_UNMASK = entity.getDISPLAY_UNMASK();
        if (DISPLAY_UNMASK != null) {
            stmt.bindString(5, DISPLAY_UNMASK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaskingModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MASKING_ID = entity.getMASKING_ID();
        if (MASKING_ID != null) {
            stmt.bindString(2, MASKING_ID);
        }
 
        String DR_PAN_UNMASK = entity.getDR_PAN_UNMASK();
        if (DR_PAN_UNMASK != null) {
            stmt.bindString(3, DR_PAN_UNMASK);
        }
 
        String DR_EXP_UNMASK = entity.getDR_EXP_UNMASK();
        if (DR_EXP_UNMASK != null) {
            stmt.bindString(4, DR_EXP_UNMASK);
        }
 
        String DISPLAY_UNMASK = entity.getDISPLAY_UNMASK();
        if (DISPLAY_UNMASK != null) {
            stmt.bindString(5, DISPLAY_UNMASK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MaskingModel readEntity(Cursor cursor, int offset) {
        MaskingModel entity = new MaskingModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MASKING_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DR_PAN_UNMASK
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DR_EXP_UNMASK
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // DISPLAY_UNMASK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaskingModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMASKING_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDR_PAN_UNMASK(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDR_EXP_UNMASK(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDISPLAY_UNMASK(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MaskingModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MaskingModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MaskingModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
