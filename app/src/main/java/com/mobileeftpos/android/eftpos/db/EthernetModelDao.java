package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ETHERNET_MODEL".
*/
public class EthernetModelDao extends AbstractDao<EthernetModel, Long> {

    public static final String TABLENAME = "ETHERNET_MODEL";

    /**
     * Properties of entity EthernetModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ETHERNET_ID = new Property(1, String.class, "ETHERNET_ID", false, "ETHERNET__ID");
        public final static Property LOCAL_IP = new Property(2, String.class, "LOCAL_IP", false, "LOCAL__IP");
        public final static Property SUBNET_MASK = new Property(3, String.class, "SUBNET_MASK", false, "SUBNET__MASK");
        public final static Property GATEWAY = new Property(4, String.class, "GATEWAY", false, "GATEWAY");
        public final static Property DNS1 = new Property(5, String.class, "DNS1", false, "DNS1");
        public final static Property DNS2 = new Property(6, String.class, "DNS2", false, "DNS2");
    }


    public EthernetModelDao(DaoConfig config) {
        super(config);
    }
    
    public EthernetModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ETHERNET_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ETHERNET__ID\" TEXT," + // 1: ETHERNET_ID
                "\"LOCAL__IP\" TEXT," + // 2: LOCAL_IP
                "\"SUBNET__MASK\" TEXT," + // 3: SUBNET_MASK
                "\"GATEWAY\" TEXT," + // 4: GATEWAY
                "\"DNS1\" TEXT," + // 5: DNS1
                "\"DNS2\" TEXT);"); // 6: DNS2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ETHERNET_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EthernetModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ETHERNET_ID = entity.getETHERNET_ID();
        if (ETHERNET_ID != null) {
            stmt.bindString(2, ETHERNET_ID);
        }
 
        String LOCAL_IP = entity.getLOCAL_IP();
        if (LOCAL_IP != null) {
            stmt.bindString(3, LOCAL_IP);
        }
 
        String SUBNET_MASK = entity.getSUBNET_MASK();
        if (SUBNET_MASK != null) {
            stmt.bindString(4, SUBNET_MASK);
        }
 
        String GATEWAY = entity.getGATEWAY();
        if (GATEWAY != null) {
            stmt.bindString(5, GATEWAY);
        }
 
        String DNS1 = entity.getDNS1();
        if (DNS1 != null) {
            stmt.bindString(6, DNS1);
        }
 
        String DNS2 = entity.getDNS2();
        if (DNS2 != null) {
            stmt.bindString(7, DNS2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EthernetModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ETHERNET_ID = entity.getETHERNET_ID();
        if (ETHERNET_ID != null) {
            stmt.bindString(2, ETHERNET_ID);
        }
 
        String LOCAL_IP = entity.getLOCAL_IP();
        if (LOCAL_IP != null) {
            stmt.bindString(3, LOCAL_IP);
        }
 
        String SUBNET_MASK = entity.getSUBNET_MASK();
        if (SUBNET_MASK != null) {
            stmt.bindString(4, SUBNET_MASK);
        }
 
        String GATEWAY = entity.getGATEWAY();
        if (GATEWAY != null) {
            stmt.bindString(5, GATEWAY);
        }
 
        String DNS1 = entity.getDNS1();
        if (DNS1 != null) {
            stmt.bindString(6, DNS1);
        }
 
        String DNS2 = entity.getDNS2();
        if (DNS2 != null) {
            stmt.bindString(7, DNS2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EthernetModel readEntity(Cursor cursor, int offset) {
        EthernetModel entity = new EthernetModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ETHERNET_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LOCAL_IP
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SUBNET_MASK
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // GATEWAY
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DNS1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // DNS2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EthernetModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setETHERNET_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLOCAL_IP(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSUBNET_MASK(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGATEWAY(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDNS1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDNS2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EthernetModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EthernetModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EthernetModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
