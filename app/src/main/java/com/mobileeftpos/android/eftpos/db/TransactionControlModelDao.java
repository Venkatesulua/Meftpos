package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_CONTROL_MODEL".
*/
public class TransactionControlModelDao extends AbstractDao<TransactionControlModel, Long> {

    public static final String TABLENAME = "TRANSACTION_CONTROL_MODEL";

    /**
     * Properties of entity TransactionControlModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TCT_ID = new Property(1, String.class, "TCT_ID", false, "TCT__ID");
        public final static Property VOID_CTRL = new Property(2, String.class, "VOID_CTRL", false, "VOID__CTRL");
        public final static Property SETTLEMENT_CTRL = new Property(3, String.class, "SETTLEMENT_CTRL", false, "SETTLEMENT__CTRL");
        public final static Property SALE_CTRL = new Property(4, String.class, "SALE_CTRL", false, "SALE__CTRL");
        public final static Property AUTH_CTRL = new Property(5, String.class, "AUTH_CTRL", false, "AUTH__CTRL");
        public final static Property REFUND_CTRL = new Property(6, String.class, "REFUND_CTRL", false, "REFUND__CTRL");
        public final static Property ADJUSTMENT_CTRL = new Property(7, String.class, "ADJUSTMENT_CTRL", false, "ADJUSTMENT__CTRL");
        public final static Property OFFLINE_CTRL = new Property(8, String.class, "OFFLINE_CTRL", false, "OFFLINE__CTRL");
        public final static Property MANUAL_ENTRY_CTRL = new Property(9, String.class, "MANUAL_ENTRY_CTRL", false, "MANUAL__ENTRY__CTRL");
        public final static Property BALANCE_CTRL = new Property(10, String.class, "BALANCE_CTRL", false, "BALANCE__CTRL");
        public final static Property CASH_ADVANCE_CTRL = new Property(11, String.class, "CASH_ADVANCE_CTRL", false, "CASH__ADVANCE__CTRL");
        public final static Property PURCHASE_TIP_REQUEST_CTRL = new Property(12, String.class, "PURCHASE_TIP_REQUEST_CTRL", false, "PURCHASE__TIP__REQUEST__CTRL");
        public final static Property TIP_CTRL = new Property(13, String.class, "TIP_CTRL", false, "TIP__CTRL");
    }


    public TransactionControlModelDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionControlModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_CONTROL_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TCT__ID\" TEXT," + // 1: TCT_ID
                "\"VOID__CTRL\" TEXT," + // 2: VOID_CTRL
                "\"SETTLEMENT__CTRL\" TEXT," + // 3: SETTLEMENT_CTRL
                "\"SALE__CTRL\" TEXT," + // 4: SALE_CTRL
                "\"AUTH__CTRL\" TEXT," + // 5: AUTH_CTRL
                "\"REFUND__CTRL\" TEXT," + // 6: REFUND_CTRL
                "\"ADJUSTMENT__CTRL\" TEXT," + // 7: ADJUSTMENT_CTRL
                "\"OFFLINE__CTRL\" TEXT," + // 8: OFFLINE_CTRL
                "\"MANUAL__ENTRY__CTRL\" TEXT," + // 9: MANUAL_ENTRY_CTRL
                "\"BALANCE__CTRL\" TEXT," + // 10: BALANCE_CTRL
                "\"CASH__ADVANCE__CTRL\" TEXT," + // 11: CASH_ADVANCE_CTRL
                "\"PURCHASE__TIP__REQUEST__CTRL\" TEXT," + // 12: PURCHASE_TIP_REQUEST_CTRL
                "\"TIP__CTRL\" TEXT);"); // 13: TIP_CTRL
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_CONTROL_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionControlModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TCT_ID = entity.getTCT_ID();
        if (TCT_ID != null) {
            stmt.bindString(2, TCT_ID);
        }
 
        String VOID_CTRL = entity.getVOID_CTRL();
        if (VOID_CTRL != null) {
            stmt.bindString(3, VOID_CTRL);
        }
 
        String SETTLEMENT_CTRL = entity.getSETTLEMENT_CTRL();
        if (SETTLEMENT_CTRL != null) {
            stmt.bindString(4, SETTLEMENT_CTRL);
        }
 
        String SALE_CTRL = entity.getSALE_CTRL();
        if (SALE_CTRL != null) {
            stmt.bindString(5, SALE_CTRL);
        }
 
        String AUTH_CTRL = entity.getAUTH_CTRL();
        if (AUTH_CTRL != null) {
            stmt.bindString(6, AUTH_CTRL);
        }
 
        String REFUND_CTRL = entity.getREFUND_CTRL();
        if (REFUND_CTRL != null) {
            stmt.bindString(7, REFUND_CTRL);
        }
 
        String ADJUSTMENT_CTRL = entity.getADJUSTMENT_CTRL();
        if (ADJUSTMENT_CTRL != null) {
            stmt.bindString(8, ADJUSTMENT_CTRL);
        }
 
        String OFFLINE_CTRL = entity.getOFFLINE_CTRL();
        if (OFFLINE_CTRL != null) {
            stmt.bindString(9, OFFLINE_CTRL);
        }
 
        String MANUAL_ENTRY_CTRL = entity.getMANUAL_ENTRY_CTRL();
        if (MANUAL_ENTRY_CTRL != null) {
            stmt.bindString(10, MANUAL_ENTRY_CTRL);
        }
 
        String BALANCE_CTRL = entity.getBALANCE_CTRL();
        if (BALANCE_CTRL != null) {
            stmt.bindString(11, BALANCE_CTRL);
        }
 
        String CASH_ADVANCE_CTRL = entity.getCASH_ADVANCE_CTRL();
        if (CASH_ADVANCE_CTRL != null) {
            stmt.bindString(12, CASH_ADVANCE_CTRL);
        }
 
        String PURCHASE_TIP_REQUEST_CTRL = entity.getPURCHASE_TIP_REQUEST_CTRL();
        if (PURCHASE_TIP_REQUEST_CTRL != null) {
            stmt.bindString(13, PURCHASE_TIP_REQUEST_CTRL);
        }
 
        String TIP_CTRL = entity.getTIP_CTRL();
        if (TIP_CTRL != null) {
            stmt.bindString(14, TIP_CTRL);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionControlModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TCT_ID = entity.getTCT_ID();
        if (TCT_ID != null) {
            stmt.bindString(2, TCT_ID);
        }
 
        String VOID_CTRL = entity.getVOID_CTRL();
        if (VOID_CTRL != null) {
            stmt.bindString(3, VOID_CTRL);
        }
 
        String SETTLEMENT_CTRL = entity.getSETTLEMENT_CTRL();
        if (SETTLEMENT_CTRL != null) {
            stmt.bindString(4, SETTLEMENT_CTRL);
        }
 
        String SALE_CTRL = entity.getSALE_CTRL();
        if (SALE_CTRL != null) {
            stmt.bindString(5, SALE_CTRL);
        }
 
        String AUTH_CTRL = entity.getAUTH_CTRL();
        if (AUTH_CTRL != null) {
            stmt.bindString(6, AUTH_CTRL);
        }
 
        String REFUND_CTRL = entity.getREFUND_CTRL();
        if (REFUND_CTRL != null) {
            stmt.bindString(7, REFUND_CTRL);
        }
 
        String ADJUSTMENT_CTRL = entity.getADJUSTMENT_CTRL();
        if (ADJUSTMENT_CTRL != null) {
            stmt.bindString(8, ADJUSTMENT_CTRL);
        }
 
        String OFFLINE_CTRL = entity.getOFFLINE_CTRL();
        if (OFFLINE_CTRL != null) {
            stmt.bindString(9, OFFLINE_CTRL);
        }
 
        String MANUAL_ENTRY_CTRL = entity.getMANUAL_ENTRY_CTRL();
        if (MANUAL_ENTRY_CTRL != null) {
            stmt.bindString(10, MANUAL_ENTRY_CTRL);
        }
 
        String BALANCE_CTRL = entity.getBALANCE_CTRL();
        if (BALANCE_CTRL != null) {
            stmt.bindString(11, BALANCE_CTRL);
        }
 
        String CASH_ADVANCE_CTRL = entity.getCASH_ADVANCE_CTRL();
        if (CASH_ADVANCE_CTRL != null) {
            stmt.bindString(12, CASH_ADVANCE_CTRL);
        }
 
        String PURCHASE_TIP_REQUEST_CTRL = entity.getPURCHASE_TIP_REQUEST_CTRL();
        if (PURCHASE_TIP_REQUEST_CTRL != null) {
            stmt.bindString(13, PURCHASE_TIP_REQUEST_CTRL);
        }
 
        String TIP_CTRL = entity.getTIP_CTRL();
        if (TIP_CTRL != null) {
            stmt.bindString(14, TIP_CTRL);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransactionControlModel readEntity(Cursor cursor, int offset) {
        TransactionControlModel entity = new TransactionControlModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TCT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // VOID_CTRL
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SETTLEMENT_CTRL
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SALE_CTRL
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // AUTH_CTRL
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // REFUND_CTRL
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ADJUSTMENT_CTRL
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // OFFLINE_CTRL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // MANUAL_ENTRY_CTRL
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // BALANCE_CTRL
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // CASH_ADVANCE_CTRL
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // PURCHASE_TIP_REQUEST_CTRL
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // TIP_CTRL
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionControlModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTCT_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVOID_CTRL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSETTLEMENT_CTRL(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSALE_CTRL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAUTH_CTRL(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setREFUND_CTRL(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setADJUSTMENT_CTRL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOFFLINE_CTRL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMANUAL_ENTRY_CTRL(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBALANCE_CTRL(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCASH_ADVANCE_CTRL(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPURCHASE_TIP_REQUEST_CTRL(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTIP_CTRL(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransactionControlModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransactionControlModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionControlModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
