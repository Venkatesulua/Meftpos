package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMS_MODEL".
*/
public class CommsModelDao extends AbstractDao<CommsModel, Long> {

    public static final String TABLENAME = "COMMS_MODEL";

    /**
     * Properties of entity CommsModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property COMMOS_ID = new Property(1, String.class, "COMMOS_ID", false, "COMMOS__ID");
        public final static Property COM_DESCRIPTION = new Property(2, String.class, "COM_DESCRIPTION", false, "COM__DESCRIPTION");
        public final static Property COM_PRIMARY_TYPE = new Property(3, String.class, "COM_PRIMARY_TYPE", false, "COM__PRIMARY__TYPE");
        public final static Property COM_SECONDARY_TYPE = new Property(4, String.class, "COM_SECONDARY_TYPE", false, "COM__SECONDARY__TYPE");
        public final static Property COM_MODEM_PRIMARY_NUMBER = new Property(5, String.class, "COM_MODEM_PRIMARY_NUMBER", false, "COM__MODEM__PRIMARY__NUMBER");
        public final static Property COM_MODEM_SECONDARY_NUMBER = new Property(6, String.class, "COM_MODEM_SECONDARY_NUMBER", false, "COM__MODEM__SECONDARY__NUMBER");
        public final static Property COM_MODEM_STRING = new Property(7, String.class, "COM_MODEM_STRING", false, "COM__MODEM__STRING");
        public final static Property COM_MODEM_DISABLE_LINE_DETECT = new Property(8, String.class, "COM_MODEM_DISABLE_LINE_DETECT", false, "COM__MODEM__DISABLE__LINE__DETECT");
        public final static Property COM_MODEM_TIMEOUT = new Property(9, String.class, "COM_MODEM_TIMEOUT", false, "COM__MODEM__TIMEOUT");
        public final static Property COM_PRIMARY_IP_PORT = new Property(10, String.class, "COM_PRIMARY_IP_PORT", false, "COM__PRIMARY__IP__PORT");
        public final static Property COM_SECONDARY_IP_PORT = new Property(11, String.class, "COM_SECONDARY_IP_PORT", false, "COM__SECONDARY__IP__PORT");
        public final static Property COM_IP_TIMEOUT = new Property(12, String.class, "COM_IP_TIMEOUT", false, "COM__IP__TIMEOUT");
        public final static Property COM_CONNECT_SECONDARY = new Property(13, String.class, "COM_CONNECT_SECONDARY", false, "COM__CONNECT__SECONDARY");
        public final static Property COM_SSL_INDEX = new Property(14, String.class, "COM_SSL_INDEX", false, "COM__SSL__INDEX");
        public final static Property COM_MODEM_INDEX = new Property(15, String.class, "COM_MODEM_INDEX", false, "COM__MODEM__INDEX");
        public final static Property COM_PPP_USER_ID = new Property(16, String.class, "COM_PPP_USER_ID", false, "COM__PPP__USER__ID");
        public final static Property COM_PPP_PASSWORD = new Property(17, String.class, "COM_PPP_PASSWORD", false, "COM__PPP__PASSWORD");
        public final static Property COM_PPP_MODEM_STRING = new Property(18, String.class, "COM_PPP_MODEM_STRING", false, "COM__PPP__MODEM__STRING");
        public final static Property COM_PPP_TIMEOUT = new Property(19, String.class, "COM_PPP_TIMEOUT", false, "COM__PPP__TIMEOUT");
    }


    public CommsModelDao(DaoConfig config) {
        super(config);
    }
    
    public CommsModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMS_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COMMOS__ID\" TEXT," + // 1: COMMOS_ID
                "\"COM__DESCRIPTION\" TEXT," + // 2: COM_DESCRIPTION
                "\"COM__PRIMARY__TYPE\" TEXT," + // 3: COM_PRIMARY_TYPE
                "\"COM__SECONDARY__TYPE\" TEXT," + // 4: COM_SECONDARY_TYPE
                "\"COM__MODEM__PRIMARY__NUMBER\" TEXT," + // 5: COM_MODEM_PRIMARY_NUMBER
                "\"COM__MODEM__SECONDARY__NUMBER\" TEXT," + // 6: COM_MODEM_SECONDARY_NUMBER
                "\"COM__MODEM__STRING\" TEXT," + // 7: COM_MODEM_STRING
                "\"COM__MODEM__DISABLE__LINE__DETECT\" TEXT," + // 8: COM_MODEM_DISABLE_LINE_DETECT
                "\"COM__MODEM__TIMEOUT\" TEXT," + // 9: COM_MODEM_TIMEOUT
                "\"COM__PRIMARY__IP__PORT\" TEXT," + // 10: COM_PRIMARY_IP_PORT
                "\"COM__SECONDARY__IP__PORT\" TEXT," + // 11: COM_SECONDARY_IP_PORT
                "\"COM__IP__TIMEOUT\" TEXT," + // 12: COM_IP_TIMEOUT
                "\"COM__CONNECT__SECONDARY\" TEXT," + // 13: COM_CONNECT_SECONDARY
                "\"COM__SSL__INDEX\" TEXT," + // 14: COM_SSL_INDEX
                "\"COM__MODEM__INDEX\" TEXT," + // 15: COM_MODEM_INDEX
                "\"COM__PPP__USER__ID\" TEXT," + // 16: COM_PPP_USER_ID
                "\"COM__PPP__PASSWORD\" TEXT," + // 17: COM_PPP_PASSWORD
                "\"COM__PPP__MODEM__STRING\" TEXT," + // 18: COM_PPP_MODEM_STRING
                "\"COM__PPP__TIMEOUT\" TEXT);"); // 19: COM_PPP_TIMEOUT
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMS_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommsModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String COMMOS_ID = entity.getCOMMOS_ID();
        if (COMMOS_ID != null) {
            stmt.bindString(2, COMMOS_ID);
        }
 
        String COM_DESCRIPTION = entity.getCOM_DESCRIPTION();
        if (COM_DESCRIPTION != null) {
            stmt.bindString(3, COM_DESCRIPTION);
        }
 
        String COM_PRIMARY_TYPE = entity.getCOM_PRIMARY_TYPE();
        if (COM_PRIMARY_TYPE != null) {
            stmt.bindString(4, COM_PRIMARY_TYPE);
        }
 
        String COM_SECONDARY_TYPE = entity.getCOM_SECONDARY_TYPE();
        if (COM_SECONDARY_TYPE != null) {
            stmt.bindString(5, COM_SECONDARY_TYPE);
        }
 
        String COM_MODEM_PRIMARY_NUMBER = entity.getCOM_MODEM_PRIMARY_NUMBER();
        if (COM_MODEM_PRIMARY_NUMBER != null) {
            stmt.bindString(6, COM_MODEM_PRIMARY_NUMBER);
        }
 
        String COM_MODEM_SECONDARY_NUMBER = entity.getCOM_MODEM_SECONDARY_NUMBER();
        if (COM_MODEM_SECONDARY_NUMBER != null) {
            stmt.bindString(7, COM_MODEM_SECONDARY_NUMBER);
        }
 
        String COM_MODEM_STRING = entity.getCOM_MODEM_STRING();
        if (COM_MODEM_STRING != null) {
            stmt.bindString(8, COM_MODEM_STRING);
        }
 
        String COM_MODEM_DISABLE_LINE_DETECT = entity.getCOM_MODEM_DISABLE_LINE_DETECT();
        if (COM_MODEM_DISABLE_LINE_DETECT != null) {
            stmt.bindString(9, COM_MODEM_DISABLE_LINE_DETECT);
        }
 
        String COM_MODEM_TIMEOUT = entity.getCOM_MODEM_TIMEOUT();
        if (COM_MODEM_TIMEOUT != null) {
            stmt.bindString(10, COM_MODEM_TIMEOUT);
        }
 
        String COM_PRIMARY_IP_PORT = entity.getCOM_PRIMARY_IP_PORT();
        if (COM_PRIMARY_IP_PORT != null) {
            stmt.bindString(11, COM_PRIMARY_IP_PORT);
        }
 
        String COM_SECONDARY_IP_PORT = entity.getCOM_SECONDARY_IP_PORT();
        if (COM_SECONDARY_IP_PORT != null) {
            stmt.bindString(12, COM_SECONDARY_IP_PORT);
        }
 
        String COM_IP_TIMEOUT = entity.getCOM_IP_TIMEOUT();
        if (COM_IP_TIMEOUT != null) {
            stmt.bindString(13, COM_IP_TIMEOUT);
        }
 
        String COM_CONNECT_SECONDARY = entity.getCOM_CONNECT_SECONDARY();
        if (COM_CONNECT_SECONDARY != null) {
            stmt.bindString(14, COM_CONNECT_SECONDARY);
        }
 
        String COM_SSL_INDEX = entity.getCOM_SSL_INDEX();
        if (COM_SSL_INDEX != null) {
            stmt.bindString(15, COM_SSL_INDEX);
        }
 
        String COM_MODEM_INDEX = entity.getCOM_MODEM_INDEX();
        if (COM_MODEM_INDEX != null) {
            stmt.bindString(16, COM_MODEM_INDEX);
        }
 
        String COM_PPP_USER_ID = entity.getCOM_PPP_USER_ID();
        if (COM_PPP_USER_ID != null) {
            stmt.bindString(17, COM_PPP_USER_ID);
        }
 
        String COM_PPP_PASSWORD = entity.getCOM_PPP_PASSWORD();
        if (COM_PPP_PASSWORD != null) {
            stmt.bindString(18, COM_PPP_PASSWORD);
        }
 
        String COM_PPP_MODEM_STRING = entity.getCOM_PPP_MODEM_STRING();
        if (COM_PPP_MODEM_STRING != null) {
            stmt.bindString(19, COM_PPP_MODEM_STRING);
        }
 
        String COM_PPP_TIMEOUT = entity.getCOM_PPP_TIMEOUT();
        if (COM_PPP_TIMEOUT != null) {
            stmt.bindString(20, COM_PPP_TIMEOUT);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommsModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String COMMOS_ID = entity.getCOMMOS_ID();
        if (COMMOS_ID != null) {
            stmt.bindString(2, COMMOS_ID);
        }
 
        String COM_DESCRIPTION = entity.getCOM_DESCRIPTION();
        if (COM_DESCRIPTION != null) {
            stmt.bindString(3, COM_DESCRIPTION);
        }
 
        String COM_PRIMARY_TYPE = entity.getCOM_PRIMARY_TYPE();
        if (COM_PRIMARY_TYPE != null) {
            stmt.bindString(4, COM_PRIMARY_TYPE);
        }
 
        String COM_SECONDARY_TYPE = entity.getCOM_SECONDARY_TYPE();
        if (COM_SECONDARY_TYPE != null) {
            stmt.bindString(5, COM_SECONDARY_TYPE);
        }
 
        String COM_MODEM_PRIMARY_NUMBER = entity.getCOM_MODEM_PRIMARY_NUMBER();
        if (COM_MODEM_PRIMARY_NUMBER != null) {
            stmt.bindString(6, COM_MODEM_PRIMARY_NUMBER);
        }
 
        String COM_MODEM_SECONDARY_NUMBER = entity.getCOM_MODEM_SECONDARY_NUMBER();
        if (COM_MODEM_SECONDARY_NUMBER != null) {
            stmt.bindString(7, COM_MODEM_SECONDARY_NUMBER);
        }
 
        String COM_MODEM_STRING = entity.getCOM_MODEM_STRING();
        if (COM_MODEM_STRING != null) {
            stmt.bindString(8, COM_MODEM_STRING);
        }
 
        String COM_MODEM_DISABLE_LINE_DETECT = entity.getCOM_MODEM_DISABLE_LINE_DETECT();
        if (COM_MODEM_DISABLE_LINE_DETECT != null) {
            stmt.bindString(9, COM_MODEM_DISABLE_LINE_DETECT);
        }
 
        String COM_MODEM_TIMEOUT = entity.getCOM_MODEM_TIMEOUT();
        if (COM_MODEM_TIMEOUT != null) {
            stmt.bindString(10, COM_MODEM_TIMEOUT);
        }
 
        String COM_PRIMARY_IP_PORT = entity.getCOM_PRIMARY_IP_PORT();
        if (COM_PRIMARY_IP_PORT != null) {
            stmt.bindString(11, COM_PRIMARY_IP_PORT);
        }
 
        String COM_SECONDARY_IP_PORT = entity.getCOM_SECONDARY_IP_PORT();
        if (COM_SECONDARY_IP_PORT != null) {
            stmt.bindString(12, COM_SECONDARY_IP_PORT);
        }
 
        String COM_IP_TIMEOUT = entity.getCOM_IP_TIMEOUT();
        if (COM_IP_TIMEOUT != null) {
            stmt.bindString(13, COM_IP_TIMEOUT);
        }
 
        String COM_CONNECT_SECONDARY = entity.getCOM_CONNECT_SECONDARY();
        if (COM_CONNECT_SECONDARY != null) {
            stmt.bindString(14, COM_CONNECT_SECONDARY);
        }
 
        String COM_SSL_INDEX = entity.getCOM_SSL_INDEX();
        if (COM_SSL_INDEX != null) {
            stmt.bindString(15, COM_SSL_INDEX);
        }
 
        String COM_MODEM_INDEX = entity.getCOM_MODEM_INDEX();
        if (COM_MODEM_INDEX != null) {
            stmt.bindString(16, COM_MODEM_INDEX);
        }
 
        String COM_PPP_USER_ID = entity.getCOM_PPP_USER_ID();
        if (COM_PPP_USER_ID != null) {
            stmt.bindString(17, COM_PPP_USER_ID);
        }
 
        String COM_PPP_PASSWORD = entity.getCOM_PPP_PASSWORD();
        if (COM_PPP_PASSWORD != null) {
            stmt.bindString(18, COM_PPP_PASSWORD);
        }
 
        String COM_PPP_MODEM_STRING = entity.getCOM_PPP_MODEM_STRING();
        if (COM_PPP_MODEM_STRING != null) {
            stmt.bindString(19, COM_PPP_MODEM_STRING);
        }
 
        String COM_PPP_TIMEOUT = entity.getCOM_PPP_TIMEOUT();
        if (COM_PPP_TIMEOUT != null) {
            stmt.bindString(20, COM_PPP_TIMEOUT);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommsModel readEntity(Cursor cursor, int offset) {
        CommsModel entity = new CommsModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // COMMOS_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // COM_DESCRIPTION
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // COM_PRIMARY_TYPE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // COM_SECONDARY_TYPE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // COM_MODEM_PRIMARY_NUMBER
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // COM_MODEM_SECONDARY_NUMBER
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // COM_MODEM_STRING
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // COM_MODEM_DISABLE_LINE_DETECT
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // COM_MODEM_TIMEOUT
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // COM_PRIMARY_IP_PORT
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // COM_SECONDARY_IP_PORT
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // COM_IP_TIMEOUT
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // COM_CONNECT_SECONDARY
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // COM_SSL_INDEX
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // COM_MODEM_INDEX
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // COM_PPP_USER_ID
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // COM_PPP_PASSWORD
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // COM_PPP_MODEM_STRING
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // COM_PPP_TIMEOUT
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommsModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCOMMOS_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCOM_DESCRIPTION(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCOM_PRIMARY_TYPE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCOM_SECONDARY_TYPE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCOM_MODEM_PRIMARY_NUMBER(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCOM_MODEM_SECONDARY_NUMBER(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCOM_MODEM_STRING(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCOM_MODEM_DISABLE_LINE_DETECT(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCOM_MODEM_TIMEOUT(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCOM_PRIMARY_IP_PORT(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCOM_SECONDARY_IP_PORT(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCOM_IP_TIMEOUT(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCOM_CONNECT_SECONDARY(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCOM_SSL_INDEX(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCOM_MODEM_INDEX(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCOM_PPP_USER_ID(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCOM_PPP_PASSWORD(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCOM_PPP_MODEM_STRING(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCOM_PPP_TIMEOUT(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommsModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommsModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommsModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
