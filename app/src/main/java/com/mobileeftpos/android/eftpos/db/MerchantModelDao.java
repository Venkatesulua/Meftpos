package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MERCHANT_MODEL".
*/
public class MerchantModelDao extends AbstractDao<MerchantModel, Long> {

    public static final String TABLENAME = "MERCHANT_MODEL";

    /**
     * Properties of entity MerchantModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MERCHANT_ID = new Property(1, String.class, "MERCHANT_ID", false, "MERCHANT__ID");
        public final static Property MERCHANT_NAME = new Property(2, String.class, "MERCHANT_NAME", false, "MERCHANT__NAME");
        public final static Property MERCHANT_HEADER1 = new Property(3, String.class, "MERCHANT_HEADER1", false, "MERCHANT__HEADER1");
        public final static Property MERCHANT_HEADER2 = new Property(4, String.class, "MERCHANT_HEADER2", false, "MERCHANT__HEADER2");
        public final static Property ADDRESS_LINE1 = new Property(5, String.class, "ADDRESS_LINE1", false, "ADDRESS__LINE1");
        public final static Property ADDRESS_LINE2 = new Property(6, String.class, "ADDRESS_LINE2", false, "ADDRESS__LINE2");
        public final static Property ADDRESS_LINE3 = new Property(7, String.class, "ADDRESS_LINE3", false, "ADDRESS__LINE3");
        public final static Property ADDRESS_LINE4 = new Property(8, String.class, "ADDRESS_LINE4", false, "ADDRESS__LINE4");
        public final static Property MERCHANT_FOOTER1 = new Property(9, String.class, "MERCHANT_FOOTER1", false, "MERCHANT__FOOTER1");
        public final static Property MERCHANT_FOOTER2 = new Property(10, String.class, "MERCHANT_FOOTER2", false, "MERCHANT__FOOTER2");
    }


    public MerchantModelDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MERCHANT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MERCHANT__ID\" TEXT," + // 1: MERCHANT_ID
                "\"MERCHANT__NAME\" TEXT," + // 2: MERCHANT_NAME
                "\"MERCHANT__HEADER1\" TEXT," + // 3: MERCHANT_HEADER1
                "\"MERCHANT__HEADER2\" TEXT," + // 4: MERCHANT_HEADER2
                "\"ADDRESS__LINE1\" TEXT," + // 5: ADDRESS_LINE1
                "\"ADDRESS__LINE2\" TEXT," + // 6: ADDRESS_LINE2
                "\"ADDRESS__LINE3\" TEXT," + // 7: ADDRESS_LINE3
                "\"ADDRESS__LINE4\" TEXT," + // 8: ADDRESS_LINE4
                "\"MERCHANT__FOOTER1\" TEXT," + // 9: MERCHANT_FOOTER1
                "\"MERCHANT__FOOTER2\" TEXT);"); // 10: MERCHANT_FOOTER2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MERCHANT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MerchantModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MERCHANT_ID = entity.getMERCHANT_ID();
        if (MERCHANT_ID != null) {
            stmt.bindString(2, MERCHANT_ID);
        }
 
        String MERCHANT_NAME = entity.getMERCHANT_NAME();
        if (MERCHANT_NAME != null) {
            stmt.bindString(3, MERCHANT_NAME);
        }
 
        String MERCHANT_HEADER1 = entity.getMERCHANT_HEADER1();
        if (MERCHANT_HEADER1 != null) {
            stmt.bindString(4, MERCHANT_HEADER1);
        }
 
        String MERCHANT_HEADER2 = entity.getMERCHANT_HEADER2();
        if (MERCHANT_HEADER2 != null) {
            stmt.bindString(5, MERCHANT_HEADER2);
        }
 
        String ADDRESS_LINE1 = entity.getADDRESS_LINE1();
        if (ADDRESS_LINE1 != null) {
            stmt.bindString(6, ADDRESS_LINE1);
        }
 
        String ADDRESS_LINE2 = entity.getADDRESS_LINE2();
        if (ADDRESS_LINE2 != null) {
            stmt.bindString(7, ADDRESS_LINE2);
        }
 
        String ADDRESS_LINE3 = entity.getADDRESS_LINE3();
        if (ADDRESS_LINE3 != null) {
            stmt.bindString(8, ADDRESS_LINE3);
        }
 
        String ADDRESS_LINE4 = entity.getADDRESS_LINE4();
        if (ADDRESS_LINE4 != null) {
            stmt.bindString(9, ADDRESS_LINE4);
        }
 
        String MERCHANT_FOOTER1 = entity.getMERCHANT_FOOTER1();
        if (MERCHANT_FOOTER1 != null) {
            stmt.bindString(10, MERCHANT_FOOTER1);
        }
 
        String MERCHANT_FOOTER2 = entity.getMERCHANT_FOOTER2();
        if (MERCHANT_FOOTER2 != null) {
            stmt.bindString(11, MERCHANT_FOOTER2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MerchantModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MERCHANT_ID = entity.getMERCHANT_ID();
        if (MERCHANT_ID != null) {
            stmt.bindString(2, MERCHANT_ID);
        }
 
        String MERCHANT_NAME = entity.getMERCHANT_NAME();
        if (MERCHANT_NAME != null) {
            stmt.bindString(3, MERCHANT_NAME);
        }
 
        String MERCHANT_HEADER1 = entity.getMERCHANT_HEADER1();
        if (MERCHANT_HEADER1 != null) {
            stmt.bindString(4, MERCHANT_HEADER1);
        }
 
        String MERCHANT_HEADER2 = entity.getMERCHANT_HEADER2();
        if (MERCHANT_HEADER2 != null) {
            stmt.bindString(5, MERCHANT_HEADER2);
        }
 
        String ADDRESS_LINE1 = entity.getADDRESS_LINE1();
        if (ADDRESS_LINE1 != null) {
            stmt.bindString(6, ADDRESS_LINE1);
        }
 
        String ADDRESS_LINE2 = entity.getADDRESS_LINE2();
        if (ADDRESS_LINE2 != null) {
            stmt.bindString(7, ADDRESS_LINE2);
        }
 
        String ADDRESS_LINE3 = entity.getADDRESS_LINE3();
        if (ADDRESS_LINE3 != null) {
            stmt.bindString(8, ADDRESS_LINE3);
        }
 
        String ADDRESS_LINE4 = entity.getADDRESS_LINE4();
        if (ADDRESS_LINE4 != null) {
            stmt.bindString(9, ADDRESS_LINE4);
        }
 
        String MERCHANT_FOOTER1 = entity.getMERCHANT_FOOTER1();
        if (MERCHANT_FOOTER1 != null) {
            stmt.bindString(10, MERCHANT_FOOTER1);
        }
 
        String MERCHANT_FOOTER2 = entity.getMERCHANT_FOOTER2();
        if (MERCHANT_FOOTER2 != null) {
            stmt.bindString(11, MERCHANT_FOOTER2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MerchantModel readEntity(Cursor cursor, int offset) {
        MerchantModel entity = new MerchantModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MERCHANT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MERCHANT_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MERCHANT_HEADER1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MERCHANT_HEADER2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ADDRESS_LINE1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ADDRESS_LINE2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ADDRESS_LINE3
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ADDRESS_LINE4
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // MERCHANT_FOOTER1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // MERCHANT_FOOTER2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MerchantModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMERCHANT_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMERCHANT_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMERCHANT_HEADER1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMERCHANT_HEADER2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setADDRESS_LINE1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setADDRESS_LINE2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setADDRESS_LINE3(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setADDRESS_LINE4(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMERCHANT_FOOTER1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMERCHANT_FOOTER2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MerchantModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MerchantModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MerchantModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
