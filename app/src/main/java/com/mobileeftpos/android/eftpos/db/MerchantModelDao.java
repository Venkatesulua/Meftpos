package com.mobileeftpos.android.eftpos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MERCHANT_MODEL".
*/
public class MerchantModelDao extends AbstractDao<MerchantModel, Long> {

    public static final String TABLENAME = "MERCHANT_MODEL";

    /**
     * Properties of entity MerchantModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MERCHANT_ID = new Property(1, String.class, "MERCHANT_ID", false, "MERCHANT__ID");
        public final static Property ADDITIONAL_PROMPT = new Property(2, String.class, "ADDITIONAL_PROMPT", false, "ADDITIONAL__PROMPT");
        public final static Property DAILY_SETTLEMENT_FLAG = new Property(3, String.class, "DAILY_SETTLEMENT_FLAG", false, "DAILY__SETTLEMENT__FLAG");
        public final static Property LAST_4_DIGIT_PROMPT_FLAG = new Property(4, String.class, "LAST_4_DIGIT_PROMPT_FLAG", false, "LAST_4__DIGIT__PROMPT__FLAG");
        public final static Property INSERT_2_SWIPE = new Property(5, String.class, "INSERT_2_SWIPE", false, "INSERT_2__SWIPE");
        public final static Property PIGGYBACK_FLAG = new Property(6, String.class, "PIGGYBACK_FLAG", false, "PIGGYBACK__FLAG");
        public final static Property PINBYPASS = new Property(7, String.class, "PINBYPASS", false, "PINBYPASS");
        public final static Property AUTO_SETTLE_TIME = new Property(8, String.class, "AUTO_SETTLE_TIME", false, "AUTO__SETTLE__TIME");
        public final static Property LAST_AUTO_SETTLEMENT_DATETIME = new Property(9, String.class, "LAST_AUTO_SETTLEMENT_DATETIME", false, "LAST__AUTO__SETTLEMENT__DATETIME");
        public final static Property UTRN_PREFIX = new Property(10, String.class, "UTRN_PREFIX", false, "UTRN__PREFIX");
    }


    public MerchantModelDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MERCHANT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MERCHANT__ID\" TEXT," + // 1: MERCHANT_ID
                "\"ADDITIONAL__PROMPT\" TEXT," + // 2: ADDITIONAL_PROMPT
                "\"DAILY__SETTLEMENT__FLAG\" TEXT," + // 3: DAILY_SETTLEMENT_FLAG
                "\"LAST_4__DIGIT__PROMPT__FLAG\" TEXT," + // 4: LAST_4_DIGIT_PROMPT_FLAG
                "\"INSERT_2__SWIPE\" TEXT," + // 5: INSERT_2_SWIPE
                "\"PIGGYBACK__FLAG\" TEXT," + // 6: PIGGYBACK_FLAG
                "\"PINBYPASS\" TEXT," + // 7: PINBYPASS
                "\"AUTO__SETTLE__TIME\" TEXT," + // 8: AUTO_SETTLE_TIME
                "\"LAST__AUTO__SETTLEMENT__DATETIME\" TEXT," + // 9: LAST_AUTO_SETTLEMENT_DATETIME
                "\"UTRN__PREFIX\" TEXT);"); // 10: UTRN_PREFIX
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MERCHANT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MerchantModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MERCHANT_ID = entity.getMERCHANT_ID();
        if (MERCHANT_ID != null) {
            stmt.bindString(2, MERCHANT_ID);
        }
 
        String ADDITIONAL_PROMPT = entity.getADDITIONAL_PROMPT();
        if (ADDITIONAL_PROMPT != null) {
            stmt.bindString(3, ADDITIONAL_PROMPT);
        }
 
        String DAILY_SETTLEMENT_FLAG = entity.getDAILY_SETTLEMENT_FLAG();
        if (DAILY_SETTLEMENT_FLAG != null) {
            stmt.bindString(4, DAILY_SETTLEMENT_FLAG);
        }
 
        String LAST_4_DIGIT_PROMPT_FLAG = entity.getLAST_4_DIGIT_PROMPT_FLAG();
        if (LAST_4_DIGIT_PROMPT_FLAG != null) {
            stmt.bindString(5, LAST_4_DIGIT_PROMPT_FLAG);
        }
 
        String INSERT_2_SWIPE = entity.getINSERT_2_SWIPE();
        if (INSERT_2_SWIPE != null) {
            stmt.bindString(6, INSERT_2_SWIPE);
        }
 
        String PIGGYBACK_FLAG = entity.getPIGGYBACK_FLAG();
        if (PIGGYBACK_FLAG != null) {
            stmt.bindString(7, PIGGYBACK_FLAG);
        }
 
        String PINBYPASS = entity.getPINBYPASS();
        if (PINBYPASS != null) {
            stmt.bindString(8, PINBYPASS);
        }
 
        String AUTO_SETTLE_TIME = entity.getAUTO_SETTLE_TIME();
        if (AUTO_SETTLE_TIME != null) {
            stmt.bindString(9, AUTO_SETTLE_TIME);
        }
 
        String LAST_AUTO_SETTLEMENT_DATETIME = entity.getLAST_AUTO_SETTLEMENT_DATETIME();
        if (LAST_AUTO_SETTLEMENT_DATETIME != null) {
            stmt.bindString(10, LAST_AUTO_SETTLEMENT_DATETIME);
        }
 
        String UTRN_PREFIX = entity.getUTRN_PREFIX();
        if (UTRN_PREFIX != null) {
            stmt.bindString(11, UTRN_PREFIX);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MerchantModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MERCHANT_ID = entity.getMERCHANT_ID();
        if (MERCHANT_ID != null) {
            stmt.bindString(2, MERCHANT_ID);
        }
 
        String ADDITIONAL_PROMPT = entity.getADDITIONAL_PROMPT();
        if (ADDITIONAL_PROMPT != null) {
            stmt.bindString(3, ADDITIONAL_PROMPT);
        }
 
        String DAILY_SETTLEMENT_FLAG = entity.getDAILY_SETTLEMENT_FLAG();
        if (DAILY_SETTLEMENT_FLAG != null) {
            stmt.bindString(4, DAILY_SETTLEMENT_FLAG);
        }
 
        String LAST_4_DIGIT_PROMPT_FLAG = entity.getLAST_4_DIGIT_PROMPT_FLAG();
        if (LAST_4_DIGIT_PROMPT_FLAG != null) {
            stmt.bindString(5, LAST_4_DIGIT_PROMPT_FLAG);
        }
 
        String INSERT_2_SWIPE = entity.getINSERT_2_SWIPE();
        if (INSERT_2_SWIPE != null) {
            stmt.bindString(6, INSERT_2_SWIPE);
        }
 
        String PIGGYBACK_FLAG = entity.getPIGGYBACK_FLAG();
        if (PIGGYBACK_FLAG != null) {
            stmt.bindString(7, PIGGYBACK_FLAG);
        }
 
        String PINBYPASS = entity.getPINBYPASS();
        if (PINBYPASS != null) {
            stmt.bindString(8, PINBYPASS);
        }
 
        String AUTO_SETTLE_TIME = entity.getAUTO_SETTLE_TIME();
        if (AUTO_SETTLE_TIME != null) {
            stmt.bindString(9, AUTO_SETTLE_TIME);
        }
 
        String LAST_AUTO_SETTLEMENT_DATETIME = entity.getLAST_AUTO_SETTLEMENT_DATETIME();
        if (LAST_AUTO_SETTLEMENT_DATETIME != null) {
            stmt.bindString(10, LAST_AUTO_SETTLEMENT_DATETIME);
        }
 
        String UTRN_PREFIX = entity.getUTRN_PREFIX();
        if (UTRN_PREFIX != null) {
            stmt.bindString(11, UTRN_PREFIX);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MerchantModel readEntity(Cursor cursor, int offset) {
        MerchantModel entity = new MerchantModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MERCHANT_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ADDITIONAL_PROMPT
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DAILY_SETTLEMENT_FLAG
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // LAST_4_DIGIT_PROMPT_FLAG
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // INSERT_2_SWIPE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PIGGYBACK_FLAG
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PINBYPASS
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // AUTO_SETTLE_TIME
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // LAST_AUTO_SETTLEMENT_DATETIME
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // UTRN_PREFIX
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MerchantModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMERCHANT_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setADDITIONAL_PROMPT(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDAILY_SETTLEMENT_FLAG(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLAST_4_DIGIT_PROMPT_FLAG(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setINSERT_2_SWIPE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPIGGYBACK_FLAG(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPINBYPASS(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAUTO_SETTLE_TIME(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLAST_AUTO_SETTLEMENT_DATETIME(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUTRN_PREFIX(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MerchantModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MerchantModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MerchantModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
